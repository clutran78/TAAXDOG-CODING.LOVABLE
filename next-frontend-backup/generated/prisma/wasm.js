
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  emailVerified: 'emailVerified',
  name: 'name',
  phone: 'phone',
  password: 'password',
  image: 'image',
  role: 'role',
  abn: 'abn',
  tfn: 'tfn',
  taxResidency: 'taxResidency',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  lastLoginAt: 'lastLoginAt',
  lastLoginIp: 'lastLoginIp',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  emailVerificationToken: 'emailVerificationToken',
  emailVerificationExpires: 'emailVerificationExpires',
  passwordResetToken: 'passwordResetToken',
  passwordResetExpires: 'passwordResetExpires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires',
  createdAt: 'createdAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  event: 'event',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  metadata: 'metadata',
  success: 'success',
  createdAt: 'createdAt'
};

exports.Prisma.FinancialAuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  operationType: 'operationType',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  httpMethod: 'httpMethod',
  endpoint: 'endpoint',
  previousData: 'previousData',
  currentData: 'currentData',
  changedFields: 'changedFields',
  amount: 'amount',
  gstAmount: 'gstAmount',
  currency: 'currency',
  taxYear: 'taxYear',
  success: 'success',
  errorMessage: 'errorMessage',
  hashChain: 'hashChain',
  previousHash: 'previousHash',
  createdAt: 'createdAt',
  timezone: 'timezone'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripePriceId: 'stripePriceId',
  status: 'status',
  plan: 'plan',
  interval: 'interval',
  amount: 'amount',
  currency: 'currency',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  cancelledAt: 'cancelledAt',
  trialEnd: 'trialEnd',
  defaultPaymentMethodId: 'defaultPaymentMethodId',
  lastPaymentAttempt: 'lastPaymentAttempt',
  failedPaymentCount: 'failedPaymentCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaxReturnScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  year: 'year',
  data: 'data',
  status: 'status',
  submittedAt: 'submittedAt',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripePaymentIntentId: 'stripePaymentIntentId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  stripeInvoiceId: 'stripeInvoiceId',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerABN: 'customerABN',
  subtotal: 'subtotal',
  gstAmount: 'gstAmount',
  total: 'total',
  status: 'status',
  invoiceDate: 'invoiceDate',
  paidAt: 'paidAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceLineItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AIConversationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  provider: 'provider',
  model: 'model',
  messages: 'messages',
  context: 'context',
  tokensUsed: 'tokensUsed',
  costUsd: 'costUsd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AIInsightScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  insightType: 'insightType',
  category: 'category',
  content: 'content',
  confidenceScore: 'confidenceScore',
  sourceDataIds: 'sourceDataIds',
  provider: 'provider',
  model: 'model',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.AIUsageTrackingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  model: 'model',
  operationType: 'operationType',
  tokensInput: 'tokensInput',
  tokensOutput: 'tokensOutput',
  costUsd: 'costUsd',
  responseTimeMs: 'responseTimeMs',
  success: 'success',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt'
};

exports.Prisma.AICacheScalarFieldEnum = {
  id: 'id',
  cacheKey: 'cacheKey',
  operationType: 'operationType',
  inputHash: 'inputHash',
  response: 'response',
  provider: 'provider',
  model: 'model',
  hitCount: 'hitCount',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.AIProviderHealthScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  status: 'status',
  consecutiveFailures: 'consecutiveFailures',
  lastFailureAt: 'lastFailureAt',
  lastSuccessAt: 'lastSuccessAt',
  circuitOpenUntil: 'circuitOpenUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Basiq_usersScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  basiq_user_id: 'basiq_user_id',
  email: 'email',
  mobile: 'mobile',
  connection_status: 'connection_status',
  consent_id: 'consent_id',
  consent_status: 'consent_status',
  consent_expires_at: 'consent_expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Bank_connectionsScalarFieldEnum = {
  id: 'id',
  basiq_user_id: 'basiq_user_id',
  connection_id: 'connection_id',
  institution_id: 'institution_id',
  institution_name: 'institution_name',
  institution_short_name: 'institution_short_name',
  institution_logo_url: 'institution_logo_url',
  status: 'status',
  last_synced: 'last_synced',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Bank_accountsScalarFieldEnum = {
  id: 'id',
  basiq_user_id: 'basiq_user_id',
  connection_id: 'connection_id',
  basiq_account_id: 'basiq_account_id',
  account_holder: 'account_holder',
  account_number: 'account_number',
  bsb: 'bsb',
  institution_name: 'institution_name',
  account_type: 'account_type',
  account_name: 'account_name',
  balance_available: 'balance_available',
  balance_current: 'balance_current',
  currency: 'currency',
  status: 'status',
  is_business_account: 'is_business_account',
  last_synced: 'last_synced',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Bank_transactionsScalarFieldEnum = {
  id: 'id',
  bank_account_id: 'bank_account_id',
  basiq_transaction_id: 'basiq_transaction_id',
  description: 'description',
  amount: 'amount',
  transaction_date: 'transaction_date',
  post_date: 'post_date',
  balance: 'balance',
  transaction_type: 'transaction_type',
  direction: 'direction',
  category: 'category',
  subcategory: 'subcategory',
  merchant_name: 'merchant_name',
  status: 'status',
  is_business_expense: 'is_business_expense',
  tax_category: 'tax_category',
  gst_amount: 'gst_amount',
  receipt_id: 'receipt_id',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Basiq_webhooksScalarFieldEnum = {
  id: 'id',
  webhook_id: 'webhook_id',
  event_type: 'event_type',
  resource_type: 'resource_type',
  resource_id: 'resource_id',
  payload: 'payload',
  status: 'status',
  processed_at: 'processed_at',
  error_message: 'error_message',
  retry_count: 'retry_count',
  created_at: 'created_at'
};

exports.Prisma.Basiq_api_logsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  endpoint: 'endpoint',
  method: 'method',
  request_body: 'request_body',
  response_status: 'response_status',
  response_body: 'response_body',
  error_message: 'error_message',
  duration_ms: 'duration_ms',
  created_at: 'created_at'
};

exports.Prisma.ReceiptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  merchant: 'merchant',
  totalAmount: 'totalAmount',
  gstAmount: 'gstAmount',
  date: 'date',
  items: 'items',
  imageUrl: 'imageUrl',
  aiProcessed: 'aiProcessed',
  aiConfidence: 'aiConfidence',
  aiProvider: 'aiProvider',
  aiModel: 'aiModel',
  processingStatus: 'processingStatus',
  abn: 'abn',
  taxInvoiceNumber: 'taxInvoiceNumber',
  taxCategory: 'taxCategory',
  isGstRegistered: 'isGstRegistered',
  matchedTransactionId: 'matchedTransactionId',
  matchConfidence: 'matchConfidence',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BudgetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  monthlyBudget: 'monthlyBudget',
  targetSavings: 'targetSavings',
  monthlyIncome: 'monthlyIncome',
  predictions: 'predictions',
  categoryLimits: 'categoryLimits',
  confidenceScore: 'confidenceScore',
  aiProvider: 'aiProvider',
  aiModel: 'aiModel',
  analysisPeriod: 'analysisPeriod',
  predictionPeriod: 'predictionPeriod',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BudgetTrackingScalarFieldEnum = {
  id: 'id',
  budgetId: 'budgetId',
  userId: 'userId',
  month: 'month',
  year: 'year',
  predictedAmount: 'predictedAmount',
  actualAmount: 'actualAmount',
  variance: 'variance',
  category: 'category',
  createdAt: 'createdAt'
};

exports.Prisma.FinancialInsightScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  insightType: 'insightType',
  category: 'category',
  content: 'content',
  confidenceScore: 'confidenceScore',
  sourceDataIds: 'sourceDataIds',
  provider: 'provider',
  model: 'model',
  title: 'title',
  description: 'description',
  recommendations: 'recommendations',
  priority: 'priority',
  isActive: 'isActive',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.GoalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  targetAmount: 'targetAmount',
  currentAmount: 'currentAmount',
  targetDate: 'targetDate',
  category: 'category',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AMLTransactionMonitoringScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  transactionId: 'transactionId',
  monitoringType: 'monitoringType',
  riskScore: 'riskScore',
  riskFactors: 'riskFactors',
  amount: 'amount',
  currency: 'currency',
  patternType: 'patternType',
  patternDetails: 'patternDetails',
  velocityScore: 'velocityScore',
  requiresReview: 'requiresReview',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  reportedToAUSTRAC: 'reportedToAUSTRAC',
  reportReference: 'reportReference',
  reportedAt: 'reportedAt',
  falsePositive: 'falsePositive',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PrivacyConsentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  consentType: 'consentType',
  consentVersion: 'consentVersion',
  consentStatus: 'consentStatus',
  consentDate: 'consentDate',
  expiryDate: 'expiryDate',
  purposes: 'purposes',
  dataCategories: 'dataCategories',
  thirdParties: 'thirdParties',
  withdrawnAt: 'withdrawnAt',
  withdrawalReason: 'withdrawalReason',
  legalBasis: 'legalBasis',
  jurisdiction: 'jurisdiction',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataAccessRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  requestType: 'requestType',
  requestStatus: 'requestStatus',
  requestDate: 'requestDate',
  requestDetails: 'requestDetails',
  verificationMethod: 'verificationMethod',
  verifiedAt: 'verifiedAt',
  processedBy: 'processedBy',
  processedAt: 'processedAt',
  completedAt: 'completedAt',
  responseMethod: 'responseMethod',
  responseUrl: 'responseUrl',
  responseExpiryDate: 'responseExpiryDate',
  dueDate: 'dueDate',
  extensionReason: 'extensionReason',
  extendedDueDate: 'extendedDueDate',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.APRAIncidentReportScalarFieldEnum = {
  id: 'id',
  incidentType: 'incidentType',
  severity: 'severity',
  status: 'status',
  title: 'title',
  description: 'description',
  detectedAt: 'detectedAt',
  reportedAt: 'reportedAt',
  resolvedAt: 'resolvedAt',
  affectedUsers: 'affectedUsers',
  affectedSystems: 'affectedSystems',
  dataCompromised: 'dataCompromised',
  financialImpact: 'financialImpact',
  immediateActions: 'immediateActions',
  rootCause: 'rootCause',
  remediation: 'remediation',
  preventiveMeasures: 'preventiveMeasures',
  reportedToAPRA: 'reportedToAPRA',
  apraReference: 'apraReference',
  reportedToOAIC: 'reportedToOAIC',
  oaicReference: 'oaicReference',
  bcpActivated: 'bcpActivated',
  serviceDowntime: 'serviceDowntime',
  dataRecoveryTime: 'dataRecoveryTime',
  reportedBy: 'reportedBy',
  responsibleTeam: 'responsibleTeam',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GSTTransactionDetailScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  invoiceId: 'invoiceId',
  baseAmount: 'baseAmount',
  gstRate: 'gstRate',
  gstAmount: 'gstAmount',
  totalAmount: 'totalAmount',
  taxCategory: 'taxCategory',
  gstTreatment: 'gstTreatment',
  inputTaxCredit: 'inputTaxCredit',
  supplierABN: 'supplierABN',
  supplierName: 'supplierName',
  isGSTRegistered: 'isGSTRegistered',
  basReportingCode: 'basReportingCode',
  taxPeriod: 'taxPeriod',
  reportedInBAS: 'reportedInBAS',
  basReference: 'basReference',
  validated: 'validated',
  validationErrors: 'validationErrors',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComplianceConfigurationScalarFieldEnum = {
  id: 'id',
  configType: 'configType',
  configData: 'configData',
  isActive: 'isActive',
  amlThresholds: 'amlThresholds',
  dataRetentionDays: 'dataRetentionDays',
  consentExpireDays: 'consentExpireDays',
  incidentReportHours: 'incidentReportHours',
  backupFrequency: 'backupFrequency',
  gstRate: 'gstRate',
  basReportingCodes: 'basReportingCodes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  ACCOUNTANT: 'ACCOUNTANT',
  SUPPORT: 'SUPPORT'
};

exports.TaxResidency = exports.$Enums.TaxResidency = {
  RESIDENT: 'RESIDENT',
  NON_RESIDENT: 'NON_RESIDENT',
  TEMPORARY_RESIDENT: 'TEMPORARY_RESIDENT'
};

exports.AuthEvent = exports.$Enums.AuthEvent = {
  LOGIN: 'LOGIN',
  LOGIN_SUCCESS: 'LOGIN_SUCCESS',
  LOGIN_FAILED: 'LOGIN_FAILED',
  LOGOUT: 'LOGOUT',
  REGISTER: 'REGISTER',
  PASSWORD_RESET: 'PASSWORD_RESET',
  PASSWORD_RESET_REQUEST: 'PASSWORD_RESET_REQUEST',
  PASSWORD_RESET_SUCCESS: 'PASSWORD_RESET_SUCCESS',
  PASSWORD_CHANGE: 'PASSWORD_CHANGE',
  EMAIL_VERIFICATION: 'EMAIL_VERIFICATION',
  ACCOUNT_LOCKED: 'ACCOUNT_LOCKED',
  ACCOUNT_UNLOCKED: 'ACCOUNT_UNLOCKED',
  TWO_FACTOR_ENABLED: 'TWO_FACTOR_ENABLED',
  TWO_FACTOR_DISABLED: 'TWO_FACTOR_DISABLED',
  TWO_FACTOR_SUCCESS: 'TWO_FACTOR_SUCCESS',
  TWO_FACTOR_FAILED: 'TWO_FACTOR_FAILED',
  SESSION_EXPIRED: 'SESSION_EXPIRED',
  SUSPICIOUS_ACTIVITY: 'SUSPICIOUS_ACTIVITY'
};

exports.FinancialOperation = exports.$Enums.FinancialOperation = {
  GOAL_CREATE: 'GOAL_CREATE',
  GOAL_UPDATE: 'GOAL_UPDATE',
  GOAL_DELETE: 'GOAL_DELETE',
  GOAL_COMPLETE: 'GOAL_COMPLETE',
  TRANSACTION_CREATE: 'TRANSACTION_CREATE',
  TRANSACTION_UPDATE: 'TRANSACTION_UPDATE',
  TRANSACTION_DELETE: 'TRANSACTION_DELETE',
  TRANSACTION_CATEGORIZE: 'TRANSACTION_CATEGORIZE',
  RECEIPT_UPLOAD: 'RECEIPT_UPLOAD',
  RECEIPT_PROCESS: 'RECEIPT_PROCESS',
  RECEIPT_UPDATE: 'RECEIPT_UPDATE',
  RECEIPT_DELETE: 'RECEIPT_DELETE',
  RECEIPT_MATCH: 'RECEIPT_MATCH',
  BANK_CONNECT: 'BANK_CONNECT',
  BANK_DISCONNECT: 'BANK_DISCONNECT',
  BANK_SYNC: 'BANK_SYNC',
  BANK_ACCOUNT_ADD: 'BANK_ACCOUNT_ADD',
  BANK_ACCOUNT_REMOVE: 'BANK_ACCOUNT_REMOVE',
  BUDGET_CREATE: 'BUDGET_CREATE',
  BUDGET_UPDATE: 'BUDGET_UPDATE',
  BUDGET_DELETE: 'BUDGET_DELETE',
  SUBSCRIPTION_CREATE: 'SUBSCRIPTION_CREATE',
  SUBSCRIPTION_UPDATE: 'SUBSCRIPTION_UPDATE',
  SUBSCRIPTION_CANCEL: 'SUBSCRIPTION_CANCEL',
  REPORT_GENERATE: 'REPORT_GENERATE',
  REPORT_EXPORT: 'REPORT_EXPORT',
  TAX_RETURN_CREATE: 'TAX_RETURN_CREATE',
  TAX_RETURN_UPDATE: 'TAX_RETURN_UPDATE',
  TAX_RETURN_SUBMIT: 'TAX_RETURN_SUBMIT',
  DATA_EXPORT: 'DATA_EXPORT',
  DATA_IMPORT: 'DATA_IMPORT',
  COMPLIANCE_CONSENT_GRANTED: 'COMPLIANCE_CONSENT_GRANTED',
  COMPLIANCE_CONSENT_REVOKED: 'COMPLIANCE_CONSENT_REVOKED',
  COMPLIANCE_DATA_ACCESS: 'COMPLIANCE_DATA_ACCESS',
  COMPLIANCE_DATA_DELETION: 'COMPLIANCE_DATA_DELETION',
  COMPLIANCE_REPORT_GENERATED: 'COMPLIANCE_REPORT_GENERATED',
  AML_TRANSACTION_FLAGGED: 'AML_TRANSACTION_FLAGGED',
  AML_REPORT_SUBMITTED: 'AML_REPORT_SUBMITTED'
};

exports.Plan = exports.$Enums.Plan = {
  SMART: 'SMART',
  PRO: 'PRO'
};

exports.TaxReturnStatus = exports.$Enums.TaxReturnStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED'
};

exports.ReceiptStatus = exports.$Enums.ReceiptStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  PROCESSED: 'PROCESSED',
  MANUAL_REVIEW: 'MANUAL_REVIEW',
  FAILED: 'FAILED',
  MATCHED: 'MATCHED'
};

exports.BudgetStatus = exports.$Enums.BudgetStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  DRAFT: 'DRAFT'
};

exports.InsightPriority = exports.$Enums.InsightPriority = {
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW'
};

exports.GoalStatus = exports.$Enums.GoalStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  PAUSED: 'PAUSED',
  CANCELLED: 'CANCELLED'
};

exports.AMLMonitoringType = exports.$Enums.AMLMonitoringType = {
  THRESHOLD_EXCEEDED: 'THRESHOLD_EXCEEDED',
  VELOCITY_CHECK: 'VELOCITY_CHECK',
  PATTERN_DETECTION: 'PATTERN_DETECTION',
  SUSPICIOUS_ACTIVITY: 'SUSPICIOUS_ACTIVITY',
  CUSTOMER_RISK_PROFILE: 'CUSTOMER_RISK_PROFILE',
  SANCTIONS_SCREENING: 'SANCTIONS_SCREENING'
};

exports.ConsentType = exports.$Enums.ConsentType = {
  PRIVACY_POLICY: 'PRIVACY_POLICY',
  TERMS_OF_SERVICE: 'TERMS_OF_SERVICE',
  MARKETING_COMMUNICATIONS: 'MARKETING_COMMUNICATIONS',
  DATA_SHARING: 'DATA_SHARING',
  THIRD_PARTY_INTEGRATION: 'THIRD_PARTY_INTEGRATION',
  BIOMETRIC_DATA: 'BIOMETRIC_DATA'
};

exports.ConsentStatus = exports.$Enums.ConsentStatus = {
  PENDING: 'PENDING',
  GRANTED: 'GRANTED',
  DENIED: 'DENIED',
  WITHDRAWN: 'WITHDRAWN',
  EXPIRED: 'EXPIRED'
};

exports.DataRequestType = exports.$Enums.DataRequestType = {
  ACCESS_REQUEST: 'ACCESS_REQUEST',
  PORTABILITY_REQUEST: 'PORTABILITY_REQUEST',
  DELETION_REQUEST: 'DELETION_REQUEST',
  CORRECTION_REQUEST: 'CORRECTION_REQUEST',
  RESTRICTION_REQUEST: 'RESTRICTION_REQUEST'
};

exports.DataRequestStatus = exports.$Enums.DataRequestStatus = {
  PENDING: 'PENDING',
  VERIFIED: 'VERIFIED',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.IncidentType = exports.$Enums.IncidentType = {
  DATA_BREACH: 'DATA_BREACH',
  SYSTEM_OUTAGE: 'SYSTEM_OUTAGE',
  SECURITY_INCIDENT: 'SECURITY_INCIDENT',
  COMPLIANCE_BREACH: 'COMPLIANCE_BREACH',
  OPERATIONAL_FAILURE: 'OPERATIONAL_FAILURE',
  THIRD_PARTY_FAILURE: 'THIRD_PARTY_FAILURE'
};

exports.IncidentSeverity = exports.$Enums.IncidentSeverity = {
  CRITICAL: 'CRITICAL',
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW'
};

exports.IncidentStatus = exports.$Enums.IncidentStatus = {
  OPEN: 'OPEN',
  INVESTIGATING: 'INVESTIGATING',
  CONTAINED: 'CONTAINED',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.GSTTreatment = exports.$Enums.GSTTreatment = {
  TAXABLE_SUPPLY: 'TAXABLE_SUPPLY',
  GST_FREE: 'GST_FREE',
  INPUT_TAXED: 'INPUT_TAXED',
  OUT_OF_SCOPE: 'OUT_OF_SCOPE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  AuditLog: 'AuditLog',
  FinancialAuditLog: 'FinancialAuditLog',
  Subscription: 'Subscription',
  TaxReturn: 'TaxReturn',
  Payment: 'Payment',
  Invoice: 'Invoice',
  InvoiceLineItem: 'InvoiceLineItem',
  AIConversation: 'AIConversation',
  AIInsight: 'AIInsight',
  AIUsageTracking: 'AIUsageTracking',
  AICache: 'AICache',
  AIProviderHealth: 'AIProviderHealth',
  basiq_users: 'basiq_users',
  bank_connections: 'bank_connections',
  bank_accounts: 'bank_accounts',
  bank_transactions: 'bank_transactions',
  basiq_webhooks: 'basiq_webhooks',
  basiq_api_logs: 'basiq_api_logs',
  Receipt: 'Receipt',
  Budget: 'Budget',
  BudgetTracking: 'BudgetTracking',
  FinancialInsight: 'FinancialInsight',
  Goal: 'Goal',
  AMLTransactionMonitoring: 'AMLTransactionMonitoring',
  PrivacyConsent: 'PrivacyConsent',
  DataAccessRequest: 'DataAccessRequest',
  APRAIncidentReport: 'APRAIncidentReport',
  GSTTransactionDetail: 'GSTTransactionDetail',
  ComplianceConfiguration: 'ComplianceConfiguration'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
