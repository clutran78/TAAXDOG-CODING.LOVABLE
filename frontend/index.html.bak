<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TAAXDOG - Dashboard</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Custom CSS -->
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
        }
        .sidebar {
            position: fixed;
            top: 56px; /* Match navbar height to prevent overlap */
            bottom: 0;
            left: 0;
            z-index: 100;
            padding: 0; /* Remove top padding since we're using top: 56px */
            box-shadow: inset -1px 0 0 rgba(0, 0, 0, .1);
            background-color: white;
            color: #333;
            width: 240px; /* Set explicit width to match main-content margin */
        }
        .sidebar-sticky {
            position: relative;
            height: 100%; /* Take full height of sidebar */
            padding-top: 0.5rem;
            overflow-x: hidden;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }
        .sidebar .nav-link {
            font-weight: 500;
            color: #333;
            padding: 0.75rem 1rem;
            margin-bottom: 0.25rem;
        }
        .sidebar .nav-link:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }
        .sidebar .nav-link.active {
            background-color: rgba(0, 0, 0, 0.1);
        }
        .sidebar .nav-link i {
            margin-right: 10px;
        }
        .navbar-brand {
            padding-top: 0.75rem;
            padding-bottom: 0.75rem;
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
            display: flex;
            align-items: center;
        }
        .navbar-brand i {
            color: #4361ee;
            margin-right: 10px;
        }
        .navbar {
            background-color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            position: fixed; /* Fix navbar to top */
            width: 100%;
            top: 0;
            z-index: 101;
            height: 56px; /* Set explicit height */
        }
        .navbar .navbar-toggler {
            border-color: rgba(0, 0, 0, 0.5);
        }
        .main-content {
            margin-left: 240px;
            padding: 2rem;
        }
        .card {
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            border: none;
        }
        .card-header {
            background-color: transparent;
            border-bottom: 1px solid rgba(0, 0, 0, 0.125);
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .stats-card {
            text-align: left;
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        .stats-card .card-body {
            padding: 1.5rem;
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        .stats-card .stat-value {
            font-size: 1.8rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }
        .stats-card .stat-change {
            font-size: 0.8rem;
            padding: 3px 8px;
            border-radius: 20px;
            display: inline-block;
        }
        .stats-card .positive-change {
            background-color: rgba(0, 200, 0, 0.1);
            color: #00b300;
        }
        .stats-card .negative-change {
            background-color: rgba(255, 0, 0, 0.1);
            color: #e60000;
        }
        .stats-card i {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
        }
        .income-icon {
            color: #4CAF50;
        }
        .expense-icon {
            color: #F44336;
        }
        .balance-icon {
            color: #3F51B5;
        }
        .subscription-icon {
            color: #9C27B0;
        }
        .progress {
            height: 10px;
            margin-top: 5px;
            margin-bottom: 15px;
        }
        .goal-item {
            margin-bottom: 15px;
        }
        .goal-details {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        .notification-item {
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }
        .notification-item:last-child {
            border-bottom: none;
        }
        .notification-date {
            font-size: 0.8rem;
            color: #777;
        }
        .clock-display {
            position: absolute;
            bottom: 15px;
            right: 15px;
            background: #555;
            color: white;
            padding: 5px 15px;
            border-radius: 5px;
            font-size: 1.5rem;
            font-weight: bold;
        }
        .connect-bank-btn {
            background-color: #4361ee;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
        }
        .connect-bank-btn:hover {
            background-color: #3250b2;
        }
        .modal-body iframe {
            width: 100%;
            min-height: 500px;
            border: none;
        }
        .bank-connection-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px 15px;
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 10px;
        }
        .bank-icon {
            width: 40px;
            height: 40px;
            margin-right: 15px;
            border-radius: 4px;
        }
        .bank-info {
            flex-grow: 1;
        }
        .bank-name {
            font-weight: 600;
            margin-bottom: 2px;
        }
        .bank-status {
            font-size: 0.8rem;
            color: #6c757d;
        }
        .bank-status.success {
            color: #28a745;
        }
        .bank-status.error {
            color: #dc3545;
        }
        .bank-status.pending {
            color: #ffc107;
        }
        .bank-actions {
            display: flex;
            gap: 8px;
        }
        .bank-actions button {
            border: none;
            background: none;
            color: #4361ee;
            cursor: pointer;
            padding: 5px;
        }
        .bank-actions button:hover {
            color: #3250b2;
        }
        /* Mobile responsive adjustments */
        @media (max-width: 767.98px) {
            .sidebar {
                position: static;
                height: auto;
                padding: 0;
                width: 100%;
                margin-top: 56px;
            }
            .main-content {
                margin-left: 0;
                margin-top: 56px; /* Add margin for fixed navbar */
                padding: 1rem;
            }
            .navbar {
                position: fixed;
            }
            .navbar-brand {
                font-size: 1.2rem;
            }
        }
        /* Additional styles for tiles */
        .tile-card {
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            height: 100%;
        }
        
        .tile-card:hover {
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            transform: translateY(-5px);
        }
        
        .tile-card .card-body {
            display: flex;
            flex-direction: column;
            flex: 1;
            overflow: hidden; /* Prevent content from overflowing */
            position: relative; /* For positioning the clock */
        }
        
        .scrollable-content {
            scrollbar-width: thin;
            overflow-y: auto;
            flex: 1;
        }
        
        .scrollable-content::-webkit-scrollbar {
            width: 6px;
        }
        
        .scrollable-content::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        .scrollable-content::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }
        
        .scrollable-content::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        
        /* For modal content scrollability */
        #tile-modal-content {
            max-height: 70vh;
            overflow-y: auto;
            padding: 10px;
        }
        
        /* Mobile specific styles */
        @media (max-width: 767.98px) {
            .card-body {
                padding: 0.75rem;
            }
        }
        /* Logout button styling */
        .logout-button {
            margin-top: auto;
            padding: 10px 15px;
            background-color: #f8f9fa;
            border-top: 1px solid #eee;
        }
        
        .logout-button .nav-link {
            color: #dc3545 !important;
            font-weight: bold;
        }
        
        .logout-button .nav-link:hover {
            background-color: #f1f1f1;
        }
    </style>
</head>
<body>
    <!-- Top Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light sticky-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                <i class="fas fa-wallet"></i> TaaxDog
            </a>
            <div class="d-flex">
                <button class="connect-bank-btn" id="connect-bank-button">
                    Connect Bank
            </button>
            </div>
        </div>
    </nav>

    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav id="sidebar" class="col-md-3 col-lg-2 d-md-block sidebar collapse">
                <div class="sidebar-sticky">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link active" href="#">
                                <i class="fas fa-th-large"></i> Dashboard
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <i class="fas fa-arrow-circle-up text-success"></i> Net Income
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <i class="fas fa-arrow-circle-down text-danger"></i> Total Expenses
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <i class="fas fa-balance-scale text-primary"></i> Net Balance
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <i class="fas fa-credit-card text-info"></i> Subscriptions
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <i class="fas fa-bullseye text-warning"></i> Goals
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <i class="fas fa-user-circle"></i> Your Tax Profile
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <i class="fas fa-file-invoice-dollar"></i> Tax Return
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <i class="fas fa-bell"></i> Notifications
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <i class="fas fa-cog"></i> Settings
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#" id="receipts-nav-link">
                                <i class="fas fa-receipt text-success"></i> Receipts
                            </a>
                        </li>
                    </ul>
                    
                    <!-- Logout button at bottom of sidebar -->
                    <div class="logout-button mt-auto">
                        <ul class="nav flex-column">
                            <li class="nav-item">
                                <a class="nav-link d-flex align-items-center" href="#" id="logout-button">
                                    <i class="fas fa-sign-out-alt text-danger me-2"></i>
                                    <span>Log Out</span>
                            </a>
                        </li>
                    </ul>
                    </div>
                </div>
            </nav>

            <!-- Main Content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                <div class="row mt-5">
                    <!-- First Row - Stats Cards -->
                    <div class="col-md-3 mb-4">
                        <div class="card stats-card">
                            <div class="card-header">
                                Net Income
                                <i class="fas fa-arrow-circle-up income-icon"></i>
                        </div>
                            <div class="card-body">
                                <div class="stat-value" id="net-income-value">$0.00</div>
                                <div class="stat-change positive-change">
                                    <i class="fas fa-arrow-up"></i> +12.3% from last month
                    </div>
                </div>
                    </div>
                </div>
                    <div class="col-md-3 mb-4">
                        <div class="card stats-card">
                            <div class="card-header">
                                Total Expenses
                                <i class="fas fa-arrow-circle-down expense-icon"></i>
                            </div>
                            <div class="card-body">
                                <div class="stat-value" id="total-expenses-value">$0.00</div>
                                <div class="stat-change negative-change">
                                    <i class="fas fa-arrow-down"></i> -8.1% from last month
                            </div>
                        </div>
                    </div>
                    </div>
                    <div class="col-md-3 mb-4">
                        <div class="card stats-card">
                            <div class="card-header">
                                Net Balance
                                <i class="fas fa-balance-scale balance-icon"></i>
                            </div>
                            <div class="card-body">
                                <div class="stat-value" id="net-balance-value">$0.00</div>
                                <div class="stat-change positive-change">
                                    <i class="fas fa-arrow-up"></i> +15.2% from last month
                            </div>
                        </div>
                    </div>
                    </div>
                    <div class="col-md-3 mb-4">
                        <div class="card stats-card">
                            <div class="card-header">
                                Monthly Subscriptions
                                <i class="fas fa-credit-card subscription-icon"></i>
                            </div>
                            <div class="card-body">
                                <div class="stat-value" id="subscriptions-value">$0.00</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Second Row - Goals, Notifications, and Bank Accounts -->
                <div class="row mt-3">
                    <!-- Left Side - Goals -->
                    <div class="col-md-6">
                        <!-- Goals Card -->
                        <div class="card tile-card h-100" data-tile-type="goals">
                            <div class="card-header">
                                Goals Progress
                                <i class="fas fa-bullseye text-warning"></i>
                            </div>
                            <div class="card-body">
                                <div class="scrollable-content">
                                    <h3>3 Active Goals</h3>
                                    <div class="stat-change positive-change mb-4">
                                        <i class="fas fa-check-circle"></i> 60% Complete from last month
                            </div>
                                    
                                    <!-- Emergency Fund Goal -->
                                    <div class="goal-item">
                                        <div class="goal-details">
                                            <span>Emergency Fund</span>
                                            <span class="text-success">$5000.00</span>
                        </div>
                                        <div class="progress">
                                            <div class="progress-bar bg-success" role="progressbar" style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <small>$5000.00 of $10000.00</small>
                                            <small>Due: 30/06/2024</small>
                    </div>
                </div>

                                    <!-- New Car Goal -->
                                    <div class="goal-item">
                                        <div class="goal-details">
                                            <span>New Car</span>
                                            <span class="text-success">$2500.00</span>
                            </div>
                                        <div class="progress">
                                            <div class="progress-bar bg-success" role="progressbar" style="width: 16.7%" aria-valuenow="16.7" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                                        <div class="d-flex justify-content-between">
                                            <small>$2500.00 of $15000.00</small>
                                            <small>Due: 31/12/2024</small>
                    </div>
                            </div>
                                    
                                    <!-- Holiday Goal -->
                                    <div class="goal-item">
                                        <div class="goal-details">
                                            <span>Holiday</span>
                                            <span class="text-success">$1200.00</span>
                        </div>
                                        <div class="progress">
                                            <div class="progress-bar bg-success" role="progressbar" style="width: 40%" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                                        <div class="d-flex justify-content-between">
                                            <small>$1200.00 of $3000.00</small>
                                            <small>Due: 15/09/2024</small>
                            </div>
                        </div>
                    </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Right Side - Bank Accounts and Notifications -->
                    <div class="col-md-6">
                        <!-- Bank Accounts Card -->
                        <div class="card tile-card mb-3" data-tile-type="bank-accounts" style="height: calc(50% - 10px);">
                            <div class="card-header">
                                Bank Accounts
                                <i class="fas fa-university text-primary"></i>
                            </div>
                            <div class="card-body">
                                <div class="scrollable-content">
                                    <div id="bank-connections-container">
                                        <!-- Bank connections will be loaded here -->
                                        <div class="text-center py-4" id="no-connections-message">
                                            <i class="fas fa-university fa-3x mb-3 text-muted"></i>
                                            <p>No bank accounts connected yet. Click the "Connect Bank" button in the top-right corner to get started.</p>
                                        </div>
                                        <div id="connections-list" style="display: none;">
                                            <!-- Bank connections will be loaded here -->
                                        </div>
                            </div>
                        </div>
                    </div>
                </div>

                        <!-- Notifications Card -->
                        <div class="card tile-card" data-tile-type="notifications" style="height: calc(50% - 10px);">
                            <div class="card-header">
                                Notifications
                                <i class="fas fa-bell text-warning"></i>
                            </div>
                            <div class="card-body">
                                <div class="scrollable-content">
                                    <h3>2 New Updates</h3>
                                    
                                    <!-- Notifications List -->
                                    <div class="notification-item">
                                        <h5>Tax Return Due</h5>
                                        <p>Your tax return is due in 2 weeks</p>
                                        <p class="notification-date">15/03/2024</p>
                                    </div>
                                    
                                    <div class="notification-item">
                                        <h5>Goal Milestone</h5>
                                        <p>Emergency Fund reached 75% of target</p>
                                        <p class="notification-date">10/03/2024</p>
                                    </div>
                                </div>
                                
                                <!-- Clock Display -->
                                <div class="clock-display">
                                    <span id="hours">14</span>:<span id="minutes">31</span>
                                    <div class="d-flex justify-content-between">
                                        <small>min</small>
                                        <small>hour</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Third Row - Receipts Section (initially hidden) -->
                <div class="row mt-3" id="receipts-section" style="display: none;">
                    <div class="col-12">
                        <div class="card shadow-sm mb-4">
                            <div class="card-header bg-white d-flex justify-content-between align-items-center py-3">
                                <h5 class="mb-0"><i class="fas fa-receipt text-primary me-2"></i>Receipts</h5>
                                <button class="btn btn-primary" id="upload-receipt-btn">
                                    <i class="fas fa-plus me-1"></i> Upload New Receipt
                                </button>
                            </div>
                            <div class="card-body">
                                <!-- Search and Filter Bar -->
                                <div class="row mb-4">
                                    <div class="col-md-4 mb-2 mb-md-0">
                                        <div class="input-group">
                                            <input type="text" class="form-control border-end-0" id="receipt-search" placeholder="Search merchant, items...">
                                            <button class="btn btn-outline-secondary border-start-0 bg-white" type="button" id="receipt-search-btn">
                                                <i class="fas fa-search text-muted"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2 mb-md-0">
                                        <select class="form-select" id="receipt-category-filter">
                                            <option value="">All Categories</option>
                                            <option value="groceries">Groceries</option>
                                            <option value="dining">Dining & Restaurants</option>
                                            <option value="entertainment">Entertainment</option>
                                            <option value="transportation">Transportation</option>
                                            <option value="utilities">Utilities</option>
                                            <option value="housing">Housing & Rent</option>
                                            <option value="healthcare">Healthcare</option>
                                            <option value="education">Education</option>
                                            <option value="shopping">Shopping</option>
                                            <option value="travel">Travel</option>
                                            <option value="business">Business Expenses</option>
                                            <option value="other">Other</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3 mb-2 mb-md-0">
                                        <select class="form-select" id="receipt-date-filter">
                                            <option value="all">All Time</option>
                                            <option value="today">Today</option>
                                            <option value="week">This Week</option>
                                            <option value="month">This Month</option>
                                            <option value="quarter">This Quarter</option>
                                            <option value="year">This Year</option>
                                        </select>
                                    </div>
                                    <div class="col-md-2">
                                        <button class="btn btn-outline-secondary w-100" id="reset-filters-btn">
                                            <i class="fas fa-undo me-1"></i> Reset
                                        </button>
                                    </div>
                                </div>
                                
                                <div id="no-receipts-message" style="display: none;" class="text-center p-5">
                                    <div class="mb-4">
                                        <i class="fas fa-receipt fa-4x text-secondary opacity-50"></i>
                                    </div>
                                    <h5 class="text-muted mb-3">No receipts found</h5>
                                    <p class="text-muted mb-4">Upload your first receipt to start tracking your expenses</p>
                                    <button class="btn btn-primary btn-lg" id="upload-first-receipt-btn">
                                        <i class="fas fa-plus me-2"></i> Upload Your First Receipt
                                    </button>
                                </div>
                                
                                <div id="receipts-list" style="display: none;">
                                    <div class="table-responsive rounded">
                                        <table class="table table-hover align-middle">
                                            <thead class="table-light">
                                                <tr>
                                                    <th class="ps-3">Date</th>
                                                    <th>Merchant</th>
                                                    <th>Category</th>
                                                    <th>Amount</th>
                                                    <th>Status</th>
                                                    <th class="text-end pe-3">Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="receipts-table-body">
                                                <!-- Receipts will be loaded here -->
                                            </tbody>
                                        </table>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center mt-3">
                                        <div>
                                            <span class="text-muted">Showing <span id="receipts-count">0</span> receipts</span>
                                        </div>
                                        <nav aria-label="Receipt pagination">
                                            <ul class="pagination pagination-sm" id="receipts-pagination">
                                                <!-- Pagination will be added here -->
                                            </ul>
                                        </nav>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Receipt Statistics Card -->
                        <div class="card shadow-sm mb-4">
                            <div class="card-header bg-white py-3">
                                <h5 class="mb-0"><i class="fas fa-chart-pie text-primary me-2"></i>Receipt Summary</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-3 mb-3 mb-md-0">
                                        <div class="card border-0 bg-light h-100">
                                            <div class="card-body text-center">
                                                <h6 class="text-muted mb-2">Total Receipts</h6>
                                                <h3 id="total-receipts-count">0</h3>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-3 mb-md-0">
                                        <div class="card border-0 bg-light h-100">
                                            <div class="card-body text-center">
                                                <h6 class="text-muted mb-2">Total Spent</h6>
                                                <h3 id="total-receipts-amount">$0.00</h3>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-3 mb-md-0">
                                        <div class="card border-0 bg-light h-100">
                                            <div class="card-body text-center">
                                                <h6 class="text-muted mb-2">Matched Receipts</h6>
                                                <h3 id="matched-receipts-count">0</h3>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="card border-0 bg-light h-100">
                                            <div class="card-body text-center">
                                                <h6 class="text-muted mb-2">Average Amount</h6>
                                                <h3 id="average-receipt-amount">$0.00</h3>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Bank Connection Modal -->
    <div class="modal fade" id="bankConnectionModal" tabindex="-1" aria-labelledby="bankConnectionModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="bankConnectionModalLabel">Connect Your Bank Account</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="bank-connect-form" class="p-3">
                        <p class="lead mb-4">Please select your bank and enter your credentials to securely connect your account.</p>
                        
                        <div class="mb-3">
                            <label for="bankSelection" class="form-label">Select Your Bank</label>
                            <select class="form-select" id="bankSelection" required>
                                <option value="" selected disabled>Choose your bank...</option>
                                <option value="au-cba">Commonwealth Bank</option>
                                <option value="au-nab">NAB</option>
                                <option value="au-anz">ANZ</option>
                                <option value="au-westpac">Westpac</option>
                                <option value="au-ing">ING</option>
                                <option value="au-macquarie">Macquarie Bank</option>
                                <option value="au-bankwest">Bankwest</option>
                                <option value="au-stgeorge">St.George</option>
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label for="bankUsername" class="form-label">Bank Username/ID</label>
                            <input type="text" class="form-control" id="bankUsername" placeholder="Your bank login username" required>
                        </div>
                        
                        <div class="mb-3">
                            <label for="bankPassword" class="form-label">Bank Password</label>
                            <input type="password" class="form-control" id="bankPassword" placeholder="Your bank login password" required>
                            <div class="form-text">Your credentials are securely transmitted and never stored on our servers.</div>
                        </div>
                        
                        <div class="form-check mb-4">
                            <input class="form-check-input" type="checkbox" id="termsCheck" required>
                            <label class="form-check-label" for="termsCheck">
                                I agree to the <a href="#" data-bs-toggle="modal" data-bs-target="#termsModal">terms and conditions</a> for bank account connectivity
                            </label>
                        </div>
                        
                        <button type="button" id="connect-bank-submit" class="btn btn-primary">Connect</button>
                    </div>
                    
                    <div id="auth-link-container" class="text-center p-3" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3">Establishing secure connection to your bank...</p>
                    </div>
                    <iframe id="auth-link-iframe" style="display: none;" title="Bank Connection"></iframe>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Terms and Conditions Modal -->
    <div class="modal fade" id="termsModal" tabindex="-1" aria-labelledby="termsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="termsModalLabel">Terms and Conditions</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>By connecting your bank account, you agree to allow TAAXDOG to:</p>
                    <ul>
                        <li>Access your account and transaction data through the Basiq API</li>
                        <li>Use your data to provide financial insights and reports</li>
                        <li>Store necessary information to maintain the connection</li>
                    </ul>
                    <p>Your login credentials are transmitted securely and are not stored by TAAXDOG. All data is handled according to our privacy policy.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">I Understand</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Tile Content Modal -->
    <div class="modal fade" id="tileContentModal" tabindex="-1" aria-labelledby="tileContentModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="tileContentModalLabel">Tile Content</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="tile-modal-content">
                        <!-- Tile content will be loaded here -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" id="add-goal-button" class="btn btn-primary" style="display: none;">Add New Goal</button>
                    <button type="button" id="add-bank-button" class="btn btn-primary" style="display: none;">Add New Bank Account</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Receipt Upload Modal -->
    <div class="modal fade" id="receipt-upload-modal" tabindex="-1" aria-labelledby="receipt-upload-modal-label" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="receipt-upload-modal-label">Upload Receipt</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="receipt-upload-form">
                        <div class="mb-3">
                            <label for="receipt-image" class="form-label">Receipt Image</label>
                            <input type="file" class="form-control" id="receipt-image" accept="image/*" required>
                            <div class="form-text">Upload a clear image of your receipt.</div>
                        </div>
                        <div class="mb-3">
                            <label for="receipt-ocr-provider" class="form-label">OCR Provider</label>
                            <select class="form-select" id="receipt-ocr-provider">
                                <option value="docuclipper" selected>DocuClipper (Standard)</option>
                                <option value="tabscanner">Tabscanner (Enhanced)</option>
                            </select>
                            <div class="form-text">Choose which OCR service to use for processing your receipt.</div>
                        </div>
                        <div class="mb-3">
                            <label for="receipt-category" class="form-label">Category</label>
                            <select class="form-select" id="receipt-category" required>
                                <option value="" selected disabled>Select category...</option>
                                <option value="groceries">Groceries</option>
                                <option value="dining">Dining & Restaurants</option>
                                <option value="entertainment">Entertainment</option>
                                <option value="transportation">Transportation</option>
                                <option value="utilities">Utilities</option>
                                <option value="housing">Housing & Rent</option>
                                <option value="healthcare">Healthcare</option>
                                <option value="education">Education</option>
                                <option value="shopping">Shopping</option>
                                <option value="travel">Travel</option>
                                <option value="business">Business Expenses</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label for="receipt-notes" class="form-label">Notes (Optional)</label>
                            <textarea class="form-control" id="receipt-notes" rows="2" placeholder="Add any notes about this receipt..."></textarea>
                        </div>
                        
                        <div class="mb-3">
                            <div id="receipt-preview-container" style="display: none;">
                                <h6>Preview:</h6>
                                <img id="receipt-preview" src="" alt="Receipt Preview" style="max-width: 100%; max-height: 300px;">
                            </div>
                        </div>
                        
                        <div class="alert alert-info" role="alert">
                            <i class="fas fa-info-circle"></i> Our system will automatically extract information from your receipt.
                        </div>
                    </form>
                    
                    <div id="receipt-upload-progress" style="display: none;">
                        <div class="progress mb-3">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                        </div>
                        <p id="receipt-upload-status">Processing receipt...</p>
                    </div>
                    
                    <div id="receipt-upload-result" style="display: none;">
                        <div class="alert alert-success">
                            <i class="fas fa-check-circle"></i> Receipt processed successfully!
                            <div class="mt-2">
                                <strong>Details extracted:</strong>
                                <div class="card mt-2">
                                    <div class="card-body p-3">
                                        <div class="row">
                                            <div class="col-6 text-muted">Merchant:</div>
                                            <div class="col-6" id="extracted-merchant"></div>
                                        </div>
                                        <div class="row">
                                            <div class="col-6 text-muted">Total:</div>
                                            <div class="col-6" id="extracted-total"></div>
                                        </div>
                                        <div class="row">
                                            <div class="col-6 text-muted">Date:</div>
                                            <div class="col-6" id="extracted-date"></div>
                                        </div>
                                        <div class="row">
                                            <div class="col-6 text-muted">Items:</div>
                                            <div class="col-6" id="extracted-items-count"></div>
                                        </div>
                                        <div class="row">
                                            <div class="col-6 text-muted">OCR Provider:</div>
                                            <div class="col-6" id="extracted-ocr-provider"></div>
                                        </div>
                                        <div class="row mt-2">
                                            <div class="col-12">
                                                <div class="alert alert-info small">
                                                    <i class="fas fa-info-circle"></i> The receipt has been uploaded and data has been extracted. You can find it in your receipts list.
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="receipt-upload-submit">Upload</button>
                    <button type="button" class="btn btn-success" id="upload-another-receipt" style="display: none;">Upload Another</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Receipt Detail Modal -->
    <div class="modal fade" id="receipt-detail-modal" tabindex="-1" aria-labelledby="receipt-detail-modal-label" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="receipt-detail-modal-label">Receipt Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card mb-3">
                                <div class="card-header">Receipt Information</div>
                                <div class="card-body">
                                    <div class="row mb-2">
                                        <div class="col-4 text-muted">Merchant:</div>
                                        <div class="col-8" id="detail-merchant"></div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-4 text-muted">Date:</div>
                                        <div class="col-8" id="detail-date"></div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-4 text-muted">Total:</div>
                                        <div class="col-8" id="detail-total"></div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-4 text-muted">Tax:</div>
                                        <div class="col-8" id="detail-tax"></div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-4 text-muted">Category:</div>
                                        <div class="col-8">
                                            <select class="form-select form-select-sm" id="detail-category">
                                                <option value="groceries">Groceries</option>
                                                <option value="dining">Dining & Restaurants</option>
                                                <option value="entertainment">Entertainment</option>
                                                <option value="transportation">Transportation</option>
                                                <option value="utilities">Utilities</option>
                                                <option value="housing">Housing & Rent</option>
                                                <option value="healthcare">Healthcare</option>
                                                <option value="education">Education</option>
                                                <option value="shopping">Shopping</option>
                                                <option value="travel">Travel</option>
                                                <option value="business">Business Expenses</option>
                                                <option value="other">Other</option>
                                            </select>
                                            <button class="btn btn-sm btn-outline-primary mt-1" id="update-category-btn">Update</button>
                                        </div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-4 text-muted">Notes:</div>
                                        <div class="col-8">
                                            <textarea class="form-control form-control-sm" id="detail-notes" rows="2"></textarea>
                                            <button class="btn btn-sm btn-outline-primary mt-1" id="update-notes-btn">Update</button>
                                        </div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-4 text-muted">Receipt ID:</div>
                                        <div class="col-8" id="detail-receipt-id"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card mb-3">
                                <div class="card-header">Transaction Match</div>
                                <div class="card-body">
                                    <div id="no-match-message" style="display: none;">
                                        <p>No transaction matched with this receipt.</p>
                                        <button class="btn btn-sm btn-outline-primary" id="find-match-btn">Find Match</button>
                                    </div>
                                    <div id="match-details" style="display: none;">
                                        <div class="row mb-2">
                                            <div class="col-4 text-muted">Transaction:</div>
                                            <div class="col-8" id="detail-transaction-desc"></div>
                                        </div>
                                        <div class="row mb-2">
                                            <div class="col-4 text-muted">Amount:</div>
                                            <div class="col-8" id="detail-transaction-amount"></div>
                                        </div>
                                        <div class="row mb-2">
                                            <div class="col-4 text-muted">Date:</div>
                                            <div class="col-8" id="detail-transaction-date"></div>
                                        </div>
                                        <div class="row mb-2">
                                            <div class="col-4 text-muted">Confidence:</div>
                                            <div class="col-8" id="detail-match-confidence"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header">Receipt Items</div>
                        <div class="card-body">
                            <div id="no-items-message" style="display: none;">
                                <p>No detailed items were extracted from this receipt.</p>
                            </div>
                            <div id="items-table-container" style="display: none;">
                                <div class="table-responsive">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>Item</th>
                                                <th>Quantity</th>
                                                <th>Unit Price</th>
                                                <th>Total</th>
                                            </tr>
                                        </thead>
                                        <tbody id="items-table-body">
                                            <!-- Items will be loaded here -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" id="delete-receipt-btn">Delete</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Firebase App (the core Firebase SDK) -->
    <script src="https://www.gstatic.com/firebasejs/9.1.3/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.1.3/firebase-auth-compat.js"></script>
    
    <!-- Add this Firebase config and initialization code -->
    <script src="firebase-config.js"></script>
    <script>
        // Initialize Firebase with imported config
        if (typeof firebaseConfig !== 'undefined') {
            console.log('Initializing Firebase with config');
            firebase.initializeApp(firebaseConfig);
        } else {
            console.error('Firebase config is missing. Create a firebase-config.js file with your Firebase configuration.');
            // Fallback for development/testing only - DO NOT use in production
            firebase.initializeApp({
                apiKey: "demo-key-for-development",
                authDomain: "taaxdog-demo.firebaseapp.com",
                projectId: "taaxdog-demo",
                storageBucket: "taaxdog-demo.appspot.com",
                messagingSenderId: "123456789012",
                appId: "1:123456789012:web:abcdef1234567890abcdef"
            });
        }
        
        // Initialize simulated auth for development if no real auth
        function initSimulatedAuth() {
            console.log('Initializing simulated auth for development');
            // Only simulate if not already logged in
            if (!firebase.auth().currentUser) {
                // Create a simulated user for development
                const simulatedUser = {
                    uid: 'sim-user-' + Date.now(),
                    email: 'demo@example.com',
                    displayName: 'Demo User',
                    getIdToken: () => Promise.resolve('demo-token')
                };
                
                // Override the auth methods to use the simulated user
                const originalCurrentUser = firebase.auth().currentUser;
                const originalGetIdToken = firebase.auth().currentUser?.getIdToken;
                
                // Only override if not already set
                if (!originalCurrentUser) {
                    Object.defineProperty(firebase.auth(), 'currentUser', {
                        get: function() { return simulatedUser; }
                    });
                    
                    firebase.auth().getIdToken = () => Promise.resolve('demo-token');
                }
            }
        }
        
        // Check if we're in development mode and initialize simulated auth
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            console.log('Development environment detected, using simulated auth if needed');
            setTimeout(initSimulatedAuth, 1000); // Give real auth a chance to initialize first
        }
        
        // Add this right at the top of your script section
        console.log('Script loading...');

        // Global variables to track financial data
        let globalStats = {
            netIncome: 0,
            totalExpenses: 0,
            netBalance: 0,
            subscriptions: 0,
            receiptsTotal: 0
        };

        // Format currency helper function
        function formatCurrency(amount) {
            if (amount === undefined || amount === null) {
                return '';
            }
            
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD'
            }).format(amount);
        }

        // Update dashboard stats based on all data
        function updateDashboardStats() {
            console.log('Updating dashboard stats with:', globalStats);
            
            // Update the stats cards
            document.getElementById('net-income-value').textContent = formatCurrency(globalStats.netIncome);
            document.getElementById('total-expenses-value').textContent = formatCurrency(globalStats.totalExpenses);
            document.getElementById('net-balance-value').textContent = formatCurrency(globalStats.netBalance);
            document.getElementById('subscriptions-value').textContent = formatCurrency(globalStats.subscriptions);
        }

        // When page loads, set up receipts functionality immediately
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM fully loaded');
            
            // Setup receipts functionality
            setupReceiptsFunctionality();
            
            // Setup upload receipt button functionality
            setupUploadReceiptFunctionality();
            
            // Setup navigation menu
            setupNavigationMenu();
            
            // Initialize financial data
            initializeFinancialData();
            
            // Setup tiles click behavior
            setupTilesClickBehavior();
            
            // Add event listener for dashboard navigation to refresh stats
            document.querySelector('.sidebar .nav-link:first-child').addEventListener('click', function() {
                console.log('Dashboard link clicked, refreshing stats');
                updateDashboardStats();
            });
            
            // Other existing event handlers...
            // ... existing code ...
        });

        // Initialize the dashboard with sample financial data
        function initializeFinancialData() {
            console.log('Initializing financial data');
            
            // First try to load saved stats
            const statsLoaded = loadFinancialStats();
            
            if (!statsLoaded) {
                console.log('No saved stats found, using sample data');
                
                // For demonstration, we'll use sample data
                // In a real app, this would come from an API call
                
                // Start with bank connections data
                let connectionTotal = 0;
                const bankConnections = getSavedBankConnections();
                
                bankConnections.forEach(connection => {
                    if (connection.balance) {
                        connectionTotal += parseFloat(connection.balance);
                    }
                });
                
                // Simulate some expenses (we'll also add receipts data later)
                globalStats.totalExpenses = 1245.67;
                
                // Simulate some income
                globalStats.netIncome = 3500.00;
                
                // Calculate balance
                globalStats.netBalance = globalStats.netIncome - globalStats.totalExpenses;
                
                // Simulate subscriptions
                globalStats.subscriptions = 86.99;
                
                // Save initial stats
                saveFinancialStats();
            }
            
            // Now load receipts and add their totals
            loadReceiptsForStats();
            
            // Initial dashboard update
            updateDashboardStats();
        }

        // Load receipts specifically to update stats
        function loadReceiptsForStats() {
            console.log('Loading receipts for stats update');
            
            // In development mode with simulated auth
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                // Simulate receipt data for development
                setTimeout(() => {
                    // Add sample receipt totals to expenses
                    const receiptTotal = 78.94; // Example total from receipts
                    globalStats.receiptsTotal += receiptTotal;
                    globalStats.totalExpenses += receiptTotal;
                    globalStats.netBalance = globalStats.netIncome - globalStats.totalExpenses;
                    
                    // Update the dashboard
                    updateDashboardStats();
                    console.log('Updated stats with simulated receipt data');
                }, 500);
                return;
            }
        
        // Check if user is logged in
            if (!firebase.auth().currentUser) {
                console.error('User not logged in, cannot load receipts for stats');
                return;
            }
            
            // Get the Firebase ID token
            firebase.auth().currentUser.getIdToken(true)
                .then(idToken => {
                    console.log('Got Firebase ID token, fetching receipts for stats');
                    // Fetch receipts from API
                    return fetch('/api/receipts', {
                        headers: {
                            'Authorization': idToken
                        }
                    });
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load receipts. Server returned: ' + response.status);
                    }
                    
                    return response.json();
                })
                .then(data => {
                    if (!data.success) {
                        throw new Error(data.error || 'Failed to load receipts.');
                    }
                    
                    const receipts = data.receipts || [];
                    
                    // Calculate receipt totals
                    let receiptTotal = 0;
                    receipts.forEach(receipt => {
                        if (receipt.total_amount) {
                            receiptTotal += parseFloat(receipt.total_amount);
                        }
                    });
                    
                    // Update global stats
                    globalStats.receiptsTotal = receiptTotal;
                    globalStats.totalExpenses += receiptTotal;
                    globalStats.netBalance = globalStats.netIncome - globalStats.totalExpenses;
                    
                    // Update the dashboard
                    updateDashboardStats();
                })
                .catch(error => {
                    console.error('Error loading receipts for stats:', error);
                });
        }

        // Setup links in the left navigation menu
        function setupNavigationMenu() {
            console.log('Setting up navigation menu links');
            
            // Get all nav links
            const navLinks = document.querySelectorAll('.sidebar .nav-link');
            
            // Get all main content rows
            const mainRows = document.querySelectorAll('main .row:not(#receipts-section)');
            const receiptsSection = document.getElementById('receipts-section');
            
            // Add click event to all nav links
            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Only process if not already active
                    if (!this.classList.contains('active')) {
                        console.log('Nav link clicked:', this.textContent.trim());
                        
                        // Remove active class from all links
                        navLinks.forEach(l => l.classList.remove('active'));
                        
                        // Add active class to clicked link
                        this.classList.add('active');
                        
                        // Handle special case for Receipts
                        if (this.id === 'receipts-nav-link') {
                            // Hide all main rows
                            mainRows.forEach(row => row.style.display = 'none');
                            
                            // Show receipts section
                            if (receiptsSection) {
                                receiptsSection.style.display = 'flex';
                                
                                // Load receipts if not already loaded
                                try {
                                    loadReceipts();
                } catch (error) {
                                    console.error('Error loading receipts:', error);
                                }
                            }
                            return;
                        }
                        
                        // For other links, show the main dashboard
                        // Hide receipts section
                        if (receiptsSection) {
                            receiptsSection.style.display = 'none';
                        }
                        
                        // Show all main rows
                        mainRows.forEach(row => row.style.display = '');
                        
                        // Update dashboard stats when returning to dashboard
                        updateDashboardStats();
                        
                        // Scroll to specific section if needed
                        // This maps menu items to their corresponding dashboard sections
                        const sectionMap = {
                            'Dashboard': null, // Just refresh the stats
                            'Net Income': document.querySelector('.stats-card:nth-child(1)'),
                            'Total Expenses': document.querySelector('.stats-card:nth-child(2)'),
                            'Net Balance': document.querySelector('.stats-card:nth-child(3)'),
                            'Subscriptions': document.querySelector('.stats-card:nth-child(4)'),
                            'Goals': document.querySelector('[data-tile-type="goals"]'),
                            'Notifications': document.querySelector('[data-tile-type="notifications"]'),
                            'Your Tax Profile': null, // Will implement when this section exists
                            'Tax Return': null, // Will implement when this section exists
                            'Settings': null, // Will implement when this section exists
                        };
                        
                        // Get the text of the clicked link
                        const linkText = this.textContent.trim();
                        
                        // Find the corresponding section
                        const section = sectionMap[linkText];
                        
                        // If we found a section, scroll to it
                        if (section) {
                            section.scrollIntoView({ behavior: 'smooth' });
                            
                            // Add a subtle highlight effect
                            section.style.transition = 'box-shadow 0.3s ease, transform 0.3s ease';
                            section.style.boxShadow = '0 0 20px rgba(67, 97, 238, 0.6)';
                            section.style.transform = 'scale(1.02)';
                            
                            // Remove highlight after a delay
                            setTimeout(() => {
                                section.style.boxShadow = '';
                                section.style.transform = 'scale(1)';
                            }, 1500);
                        }
                    }
                });
            });
            
            // Set Dashboard as active by default
            const dashboardLink = document.querySelector('.sidebar .nav-link:first-child');
            if (dashboardLink && !dashboardLink.classList.contains('active')) {
                dashboardLink.classList.add('active');
            }
        }

        // Setup click behavior for dashboard tiles
        function setupTilesClickBehavior() {
            console.log('Setting up tiles click behavior');
            
            // Get all tile cards
            const tileCards = document.querySelectorAll('.tile-card');
            
            // Get the modal elements
            const tileModal = new bootstrap.Modal(document.getElementById('tileContentModal'));
            const modalTitle = document.getElementById('tileContentModalLabel');
            const modalContent = document.getElementById('tile-modal-content');
            const addGoalButton = document.getElementById('add-goal-button');
            const addBankButton = document.getElementById('add-bank-button');
            
            // Add click event to all tile cards
            tileCards.forEach(card => {
                card.addEventListener('click', function() {
                    console.log('Tile clicked:', this.dataset.tileType);
                    
                    // Set the modal title based on the tile type
                    const tileType = this.dataset.tileType;
                    
                    // Hide all special buttons
                    addGoalButton.style.display = 'none';
                    addBankButton.style.display = 'none';
                    
                    switch (tileType) {
                        case 'goals':
                            modalTitle.textContent = 'Goals Progress';
                            const goalsContent = this.querySelector('.scrollable-content').cloneNode(true);
                            modalContent.innerHTML = '';
                            modalContent.appendChild(goalsContent);
                            addGoalButton.style.display = 'block';
                            break;
                            
                        case 'bank-accounts':
                            modalTitle.textContent = 'Bank Accounts';
                            const bankContent = this.querySelector('.scrollable-content').cloneNode(true);
                            modalContent.innerHTML = '';
                            modalContent.appendChild(bankContent);
                            addBankButton.style.display = 'block';
                            break;
                            
                        case 'notifications':
                            modalTitle.textContent = 'Notifications';
                            const notifContent = this.querySelector('.scrollable-content').cloneNode(true);
                            modalContent.innerHTML = '';
                            modalContent.appendChild(notifContent);
                            break;
                            
                        default:
                            modalTitle.textContent = 'Tile Content';
                            modalContent.innerHTML = '<p>No content available.</p>';
                    }
                    
                    // Show the modal
                    tileModal.show();
                });
            });
        }

        // Add receipt to the total expenses when uploaded
        function addReceiptToExpenses(receipt) {
            console.log('Adding receipt to expenses:', receipt);
            
            if (receipt && receipt.total_amount) {
                const amount = parseFloat(receipt.total_amount);
                
                // Update global stats
                globalStats.receiptsTotal += amount;
                globalStats.totalExpenses += amount;
                globalStats.netBalance = globalStats.netIncome - globalStats.totalExpenses;
                
                // Update the dashboard
                updateDashboardStats();
                
                // Save the updated stats to localStorage for persistence
                saveFinancialStats();
                
                console.log('Updated expenses with receipt amount:', amount);
            }
        }

        // Add function to save and load financial stats for persistence
        function saveFinancialStats() {
            console.log('Saving financial stats to localStorage');
            localStorage.setItem('taaxdogFinancialStats', JSON.stringify(globalStats));
        }
        
        function loadFinancialStats() {
            console.log('Loading financial stats from localStorage');
            const savedStats = localStorage.getItem('taaxdogFinancialStats');
            if (savedStats) {
                try {
                    const parsedStats = JSON.parse(savedStats);
                    // Merge saved stats with global stats, keeping default values if not in saved
                    globalStats = {...globalStats, ...parsedStats};
                    console.log('Loaded financial stats:', globalStats);
                    return true;
                } catch (error) {
                    console.error('Error parsing saved financial stats:', error);
                }
            }
            return false;
        }

        // Moved receipts functionality into a separate function for clarity
        function setupReceiptsFunctionality() {
            console.log('Setting up receipts functionality');
            
            // Receipts navigation link
            const receiptsNavLink = document.getElementById('receipts-nav-link');
            console.log('Receipts nav link found:', !!receiptsNavLink);
            
            const receiptsSection = document.getElementById('receipts-section');
            console.log('Receipts section found:', !!receiptsSection);
            
            if (receiptsNavLink && receiptsSection) {
                console.log('Adding click event to receipts nav link');
                
                receiptsNavLink.addEventListener('click', function(e) {
                    console.log('Receipts link clicked!');
            e.preventDefault();
                    
                    // Hide all main content rows except receipts
                    document.querySelectorAll('main .row').forEach(row => {
                        console.log('Processing row:', row.id);
                        if (row.id !== 'receipts-section') {
                            row.style.display = 'none';
                        }
                    });
                    
                    // Show receipts section
                    receiptsSection.style.display = 'flex';
                    console.log('Receipts section displayed');
                    
                    try {
                        // Load receipts data
                        loadReceipts();
                        console.log('loadReceipts called');
                    } catch (error) {
                        console.error('Error loading receipts:', error);
                        alert('Error loading receipts: ' + error.message);
                    }
                });
            } else {
                console.error('Could not find receipts elements:', {
                    'receiptsNavLink': receiptsNavLink,
                    'receiptsSection': receiptsSection
                });
            }
        }

        // Setup upload receipt functionality
        function setupUploadReceiptFunctionality() {
            // Add this at the beginning of the function
            // Connect the upload receipt button to the modal
            const uploadReceiptBtn = document.getElementById('upload-receipt-btn');
            const uploadFirstReceiptBtn = document.getElementById('upload-first-receipt-btn');
            const receiptUploadModal = new bootstrap.Modal(document.getElementById('receipt-upload-modal'));
            
            if (uploadReceiptBtn) {
                uploadReceiptBtn.addEventListener('click', function() {
                    console.log('Upload receipt button clicked');
                    receiptUploadModal.show();
                });
            } else {
                console.error('Upload receipt button not found');
            }
            
            if (uploadFirstReceiptBtn) {
                uploadFirstReceiptBtn.addEventListener('click', function() {
                    console.log('Upload first receipt button clicked');
                    receiptUploadModal.show();
                });
            }
            
            const receiptImage = document.getElementById('receipt-image');
            const receiptPreview = document.getElementById('receipt-preview');
            const previewContainer = document.getElementById('receipt-preview-container');
            const uploadForm = document.getElementById('receipt-upload-form');
            const uploadSubmit = document.getElementById('receipt-upload-submit');
            const uploadProgress = document.getElementById('receipt-upload-progress');
            const uploadResult = document.getElementById('receipt-upload-result');
            const uploadAnother = document.getElementById('upload-another-receipt');
            const ocrProviderSelect = document.getElementById('receipt-ocr-provider');
            
            // Show preview when image is selected
            receiptImage.addEventListener('change', function() {
                const file = this.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        receiptPreview.src = e.target.result;
                        previewContainer.style.display = 'block';
                    }
                    reader.readAsDataURL(file);
                }
            });
            
            // Handle upload button click
            uploadSubmit.addEventListener('click', function() {
                if (!uploadForm.checkValidity()) {
                    uploadForm.reportValidity();
                    return;
                }
                
                // Gather form data
                const fileInput = document.getElementById('receipt-image');
                const category = document.getElementById('receipt-category').value;
                const notes = document.getElementById('receipt-notes').value;
                const ocrProvider = ocrProviderSelect.value;
                
                if (!fileInput.files[0]) {
                    alert('Please select a receipt image to upload');
                    return;
                }
                
                // Show progress
                uploadProgress.style.display = 'block';
                uploadResult.style.display = 'none';
                uploadSubmit.disabled = true;
                
                // Create FormData
                const formData = new FormData();
                formData.append('image', fileInput.files[0]);
                formData.append('category', category);
                formData.append('notes', notes);
                formData.append('use_tabscanner', ocrProvider === 'tabscanner' ? 'true' : 'false');
                
                // Get the current user's ID token for auth
                firebase.auth().currentUser.getIdToken()
                    .then(idToken => {
                        // Determine the endpoint based on the OCR provider
                        let endpoint = '/api/receipts/upload';
                        if (ocrProvider === 'tabscanner') {
                            console.log('Using Tabscanner OCR for receipt processing');
                            endpoint = '/api/receipts/upload/tabscanner';
                        } else {
                            console.log('Using DocuClipper OCR for receipt processing');
                        }
                        
                        // Upload the receipt
                        return fetch(endpoint, {
                            method: 'POST',
                            headers: {
                                'Authorization': 'Bearer ' + idToken
                            },
                            body: formData
                        });
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Upload failed: ' + response.status);
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Process successful upload
                        console.log('Receipt upload successful:', data);
                        
                        // Hide progress, show result
                        uploadProgress.style.display = 'none';
                        uploadResult.style.display = 'block';
                        uploadSubmit.style.display = 'none';
                        uploadAnother.style.display = 'inline-block';
                        
                        // Fill in the result data
                        const receipt = data.receipt_data;
                        document.getElementById('extracted-merchant').textContent = receipt.merchant || 'Unknown';
                        document.getElementById('extracted-total').textContent = formatCurrency(receipt.total_amount) || '$0.00';
                        document.getElementById('extracted-date').textContent = receipt.date || 'Unknown';
                        document.getElementById('extracted-items-count').textContent = (receipt.items && receipt.items.length) 
                            ? `${receipt.items.length} items` 
                            : 'No items';
                        document.getElementById('extracted-ocr-provider').textContent = 
                            (ocrProvider === 'tabscanner') ? 'Tabscanner (Enhanced)' : 'DocuClipper (Standard)';
                        
                        // Update expenses with this receipt
                        if (receipt.total_amount) {
                            globalStats.receiptsTotal += parseFloat(receipt.total_amount);
                            globalStats.totalExpenses += parseFloat(receipt.total_amount);
                            updateFinancialStats();
                        }
                        
                        // Refresh receipts list
                        loadUserReceipts();
                    })
                    .catch(error => {
                        console.error('Error uploading receipt:', error);
                        uploadProgress.style.display = 'none';
                        uploadSubmit.disabled = false;
                        alert('Failed to upload receipt: ' + error.message);
                    });
            });
            
            // Reset form for another upload
            uploadAnother.addEventListener('click', function() {
                uploadForm.reset();
                previewContainer.style.display = 'none';
                uploadResult.style.display = 'none';
                uploadSubmit.style.display = 'inline-block';
                uploadSubmit.disabled = false;
                uploadAnother.style.display = 'none';
            });
        }

        // Helper to refresh the auth token
        function refreshAuth() {
            console.log('Refreshing authentication token');
            
            // For development environments
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                console.log('Development mode detected, using simulated auth');
                // Ensure simulated auth is initialized
                initSimulatedAuth();
                // Return a fake token
                return Promise.resolve('dev-token-' + Date.now());
            }
            
            // Check if Firebase is initialized
            if (!firebase.auth || !firebase.auth().currentUser) {
                console.error('Firebase auth not initialized or user not logged in');
                return Promise.reject(new Error('Authentication not available. Please log in.'));
            }
            
            // Force token refresh
            return firebase.auth().currentUser.getIdToken(true)
                .catch(error => {
                    console.error('Error refreshing token:', error);
                    // Try to reauthenticate
                    return Promise.reject(new Error('Failed to refresh authentication. Please log in again.'));
                });
        }

        // Also ensure loadReceipts function is defined in global scope and properly handles authentication errors
        function loadReceipts() {
            console.log('loadReceipts function called');
            
            // Get receipts container elements
            const noReceiptsMessage = document.getElementById('no-receipts-message');
            const receiptsList = document.getElementById('receipts-list');
            const receiptsTableBody = document.getElementById('receipts-table-body');
            
            if (!noReceiptsMessage || !receiptsList) {
                console.error('Receipt container elements not found:', {
                    'noReceiptsMessage': !!noReceiptsMessage,
                    'receiptsList': !!receiptsList
                });
                return;
            }
            
            // Show loading state
            noReceiptsMessage.innerHTML = '<i class="fas fa-spinner fa-spin fa-3x mb-3"></i><p>Loading receipts...</p>';
            noReceiptsMessage.style.display = 'block';
            receiptsList.style.display = 'none';
            
            // In development mode, simulate receipts
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                console.log('Development mode detected, simulating receipts list');
                setTimeout(() => {
                    // Get stored receipts from localStorage
                    let simulatedReceipts = JSON.parse(localStorage.getItem('simulatedReceipts') || '[]');
                    
                    // If we have no stored receipts but have added expenses, create one
                    if (simulatedReceipts.length === 0 && globalStats.receiptsTotal > 0) {
                        simulatedReceipts = [{
                            receipt_id: 'sim-' + Date.now(),
                            merchant: 'Simulated Grocery Store',
                            date: new Date().toISOString().split('T')[0],
                            total_amount: 20.46,
                            tax_amount: 1.86,
                            items: [
                                {name: 'Milk 1L', quantity: 1, unit_price: 2.99, total: 2.99},
                                {name: 'Bread', quantity: 1, unit_price: 3.49, total: 3.49},
                                {name: 'Eggs', quantity: 1, unit_price: 4.99, total: 4.99},
                                {name: 'Coffee', quantity: 1, unit_price: 8.99, total: 8.99}
                            ]
                        }];
                        localStorage.setItem('simulatedReceipts', JSON.stringify(simulatedReceipts));
                    }
                    
                    displayReceipts(simulatedReceipts);
                }, 500);
                return;
            }
            
            // Check if user is logged in
            if (!firebase.auth().currentUser) {
                console.error('User not logged in');
                noReceiptsMessage.innerHTML = '<i class="fas fa-exclamation-triangle fa-3x mb-3 text-danger"></i><p>Please log in to view your receipts.</p>';
                return;
            }
            
            // Refresh the token first
            refreshAuth()
                .then(idToken => {
                    console.log('Got refreshed Firebase ID token, fetching receipts');
                    // Fetch receipts from API
                    return fetch('/api/receipts', {
                        headers: {
                            'Authorization': idToken
                        }
                    });
                })
                .then(response => {
                    console.log('Receipts API response received', response.status);
                    if (!response.ok) {
                        throw new Error('Failed to load receipts. Server returned: ' + response.status);
                    }
                    
                    return response.json();
                })
                .then(data => {
                    console.log('Receipts data:', data);
                    
                    if (!data.success) {
                        throw new Error(data.error || 'Failed to load receipts.');
                    }
                    
                    const receipts = data.receipts || [];
                    displayReceipts(receipts);
                })
                .catch(error => {
                    console.error('Error loading receipts:', error);
                    
                    // Show error message
                    noReceiptsMessage.innerHTML = `<i class="fas fa-exclamation-triangle fa-3x mb-3 text-danger"></i><p>Error loading receipts: ${error.message}</p>`;
                    noReceiptsMessage.style.display = 'block';
                    receiptsList.style.display = 'none';
                });
        }
        
        // Extracted display logic for receipts to make code more maintainable
        function displayReceipts(receipts) {
            const noReceiptsMessage = document.getElementById('no-receipts-message');
            const receiptsList = document.getElementById('receipts-list');
            const receiptsTableBody = document.getElementById('receipts-table-body');
            
            // Check if we have receipts
            if (!receipts || receipts.length === 0) {
                noReceiptsMessage.innerHTML = '<i class="fas fa-receipt fa-3x mb-3 text-muted"></i><p>No receipts uploaded yet. Click the "Upload Receipt" button to get started.</p>';
                noReceiptsMessage.style.display = 'block';
                receiptsList.style.display = 'none';
                return;
            }
            
            // Clear existing receipts
            receiptsTableBody.innerHTML = '';
            
            // Add receipts to the table
            receipts.forEach(receipt => {
                const row = document.createElement('tr');
                row.dataset.receiptId = receipt.receipt_id;
                
                // Format the date
                let formattedDate = receipt.date || 'Unknown';
                
                // Format the receipt
                row.innerHTML = `
                    <td>${formattedDate}</td>
                    <td>${receipt.merchant || 'Unknown'}</td>
                    <td>${receipt.category || 'Uncategorized'}</td>
                    <td>${formatCurrency(receipt.total_amount)}</td>
                    <td>${receipt.matched_transaction_id ? '<span class="badge bg-success">Matched</span>' : '<span class="badge bg-secondary">Unmatched</span>'}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary view-receipt" title="View Details">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger delete-receipt" title="Delete Receipt">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                
                // Add event listeners for the buttons
                const viewButton = row.querySelector('.view-receipt');
                if (viewButton) {
                    viewButton.addEventListener('click', function() {
                        viewReceiptDetails(receipt.receipt_id);
                    });
                }
                
                const deleteButton = row.querySelector('.delete-receipt');
                if (deleteButton) {
                    deleteButton.addEventListener('click', function() {
                        deleteReceipt(receipt.receipt_id);
                    });
                }
                
                // Add the row to the table
                receiptsTableBody.appendChild(row);
            });
            
            // Show the receipts list
            noReceiptsMessage.style.display = 'none';
            receiptsList.style.display = 'block';
            
            // Update the receipts count
            const receiptsCount = document.getElementById('receipts-count');
            if (receiptsCount) {
                receiptsCount.textContent = receipts.length;
            }
        }
        
        // Function to load user receipts (called after successful upload)
        function loadUserReceipts() {
            console.log('Loading user receipts after successful upload');
            
            // This is a wrapper around loadReceipts that ensures we reload after upload
            if (typeof loadReceipts === 'function') {
                loadReceipts();
            } else {
                console.error('loadReceipts function not found');
            }
        }

        // For simulating in development mode, we need to store receipts in localStorage
        function addSimulatedReceipt(receipt) {
            // Only in dev mode
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                let simulatedReceipts = JSON.parse(localStorage.getItem('simulatedReceipts') || '[]');
                simulatedReceipts.push(receipt);
                localStorage.setItem('simulatedReceipts', JSON.stringify(simulatedReceipts));
            }
        }

        // Add receipt to the total expenses when uploaded 
        function addReceiptToExpenses(receipt) {
            console.log('Adding receipt to expenses:', receipt);
            
            if (receipt && receipt.total_amount) {
                const amount = parseFloat(receipt.total_amount);
                
                // Update global stats
                globalStats.receiptsTotal += amount;
                globalStats.totalExpenses += amount;
                globalStats.netBalance = globalStats.netIncome - globalStats.totalExpenses;
                
                // Update the dashboard
                updateDashboardStats();
                
                // Save the updated stats to localStorage for persistence
                saveFinancialStats();
                
                // For development mode, store the receipt in localStorage
                if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                    addSimulatedReceipt(receipt);
                }
                
                console.log('Updated expenses with receipt amount:', amount);
            }
        }

        // Utility function for getting saved bank connections
        function getSavedBankConnections() {
            // Try to get from local storage
            const storedConnections = localStorage.getItem('bankConnections');
            return storedConnections ? JSON.parse(storedConnections) : [];
        }
        
        // Also ensure loadReceipts function is defined in global scope
        function loadReceipts() {
            console.log('loadReceipts function called');
            
            // Get receipts container elements
            const noReceiptsMessage = document.getElementById('no-receipts-message');
            const receiptsList = document.getElementById('receipts-list');
            const receiptsTableBody = document.getElementById('receipts-table-body');
            
            if (!noReceiptsMessage || !receiptsList) {
                console.error('Receipt container elements not found:', {
                    'noReceiptsMessage': !!noReceiptsMessage,
                    'receiptsList': !!receiptsList
                });
                return;
            }
            
            // Show loading state
            noReceiptsMessage.innerHTML = '<i class="fas fa-spinner fa-spin fa-3x mb-3"></i><p>Loading receipts...</p>';
            noReceiptsMessage.style.display = 'block';
            receiptsList.style.display = 'none';
            
            // Check if user is logged in
            if (!firebase.auth().currentUser) {
                console.error('User not logged in');
                noReceiptsMessage.innerHTML = '<i class="fas fa-exclamation-triangle fa-3x mb-3 text-danger"></i><p>Please log in to view your receipts.</p>';
                return;
            }
            
            // Get the Firebase ID token
            firebase.auth().currentUser.getIdToken(true)
                .then(idToken => {
                    console.log('Got Firebase ID token, fetching receipts');
                    // Fetch receipts from API
                    return fetch('/api/receipts', {
                        headers: {
                            'Authorization': idToken
                        }
                    });
                })
                .then(response => {
                    console.log('Receipts API response received', response.status);
                    if (!response.ok) {
                        throw new Error('Failed to load receipts. Server returned: ' + response.status);
                    }
                    
                    return response.json();
                })
                .then(data => {
                    console.log('Receipts data:', data);
                    
                    if (!data.success) {
                        throw new Error(data.error || 'Failed to load receipts.');
                    }
                    
                    const receipts = data.receipts || [];
                    
                    // Check if we have receipts
                    if (receipts.length === 0) {
                        noReceiptsMessage.innerHTML = '<i class="fas fa-receipt fa-3x mb-3 text-muted"></i><p>No receipts uploaded yet. Click the "Upload Receipt" button to get started.</p>';
                        noReceiptsMessage.style.display = 'block';
                        receiptsList.style.display = 'none';
                        return;
                    }
                    
                    // Clear existing receipts
                    receiptsTableBody.innerHTML = '';
                    
                    // Add receipts to the table
                    receipts.forEach(receipt => {
                        const row = document.createElement('tr');
                        row.dataset.receiptId = receipt.receipt_id;
                        
                        // Format the date
                        let formattedDate = receipt.date || 'Unknown';
                        
                        // Format the receipt
                        row.innerHTML = `
                            <td>${formattedDate}</td>
                            <td>${receipt.merchant || 'Unknown'}</td>
                            <td>${formatCurrency(receipt.total_amount)}</td>
                            <td>${formatCurrency(receipt.tax_amount) || 'N/A'}</td>
                            <td>${receipt.matched_transaction_id ? '<span class="badge bg-success">Yes</span>' : '<span class="badge bg-secondary">No</span>'}</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary view-receipt" title="View Details">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger delete-receipt" title="Delete Receipt">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        `;
                        
                        // Add event listeners for the buttons
                        const viewButton = row.querySelector('.view-receipt');
                        if (viewButton) {
                            viewButton.addEventListener('click', function() {
                                viewReceiptDetails(receipt.receipt_id);
                            });
                        }
                        
                        const deleteButton = row.querySelector('.delete-receipt');
                        if (deleteButton) {
                            deleteButton.addEventListener('click', function() {
                                deleteReceipt(receipt.receipt_id);
                            });
                        }
                        
                        // Add the row to the table
                        receiptsTableBody.appendChild(row);
                    });
                    
                    // Show the receipts list
                    noReceiptsMessage.style.display = 'none';
                    receiptsList.style.display = 'block';
                })
                .catch(error => {
                    console.error('Error loading receipts:', error);
                    
                    // Show error message
                    noReceiptsMessage.innerHTML = `<i class="fas fa-exclamation-triangle fa-3x mb-3 text-danger"></i><p>Error loading receipts: ${error.message}</p>`;
                    noReceiptsMessage.style.display = 'block';
                    receiptsList.style.display = 'none';
                });
        }
        
        // Supporting view and delete functions
        function viewReceiptDetails(receiptId) {
            console.log('Viewing receipt details:', receiptId);
            
            // Get the modal elements
            const modal = new bootstrap.Modal(document.getElementById('receipt-detail-modal'));
            const detailMerchant = document.getElementById('detail-merchant');
            const detailDate = document.getElementById('detail-date');
            const detailTotal = document.getElementById('detail-total');
            const detailTax = document.getElementById('detail-tax');
            const detailCategory = document.getElementById('detail-category');
            const detailNotes = document.getElementById('detail-notes');
            const detailReceiptId = document.getElementById('detail-receipt-id');
            const noMatchMessage = document.getElementById('no-match-message');
            const matchDetails = document.getElementById('match-details');
            const detailTransactionDesc = document.getElementById('detail-transaction-desc');
            const detailTransactionAmount = document.getElementById('detail-transaction-amount');
            const detailTransactionDate = document.getElementById('detail-transaction-date');
            const detailMatchConfidence = document.getElementById('detail-match-confidence');
            const noItemsMessage = document.getElementById('no-items-message');
            const itemsTableContainer = document.getElementById('items-table-container');
            const itemsTableBody = document.getElementById('items-table-body');
            const deleteReceiptBtn = document.getElementById('delete-receipt-btn');
            
            // Helper function to set element text safely
            function setElementText(element, text) {
                if (element) {
                    element.textContent = text;
                }
            }
            
            // Clear previous data
            setElementText(detailMerchant, '');
            setElementText(detailDate, '');
            setElementText(detailTotal, '');
            setElementText(detailTax, '');
            setElementText(detailReceiptId, '');
            setElementText(detailTransactionDesc, '');
            setElementText(detailTransactionAmount, '');
            setElementText(detailTransactionDate, '');
            setElementText(detailMatchConfidence, '');
            
            if (detailNotes) detailNotes.value = '';
            if (itemsTableBody) itemsTableBody.innerHTML = '';
            
            // Show loading state
            setElementText(detailMerchant, 'Loading...');
            
            // Handle delete button
            if (deleteReceiptBtn) {
                // Remove any existing click event handlers
                const newDeleteBtn = deleteReceiptBtn.cloneNode(true);
                deleteReceiptBtn.parentNode.replaceChild(newDeleteBtn, deleteReceiptBtn);
                
                // Add new click event handler
                newDeleteBtn.addEventListener('click', function() {
                    deleteReceipt(receiptId);
                    modal.hide();
                });
            }
            
            // Show the modal immediately to provide feedback
            modal.show();
            
            // In development/simulation mode
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                console.log('Development mode, simulating receipt details');
                
                // Try to get receipt from localStorage
                let simulatedReceipts = JSON.parse(localStorage.getItem('simulatedReceipts') || '[]');
                let receipt = simulatedReceipts.find(r => r.receipt_id === receiptId);
                
                if (!receipt) {
                    // Create a fake receipt if not found
                    receipt = {
                        receipt_id: receiptId,
                        merchant: 'Simulated Grocery Store',
                        date: new Date().toISOString().split('T')[0],
                        total_amount: 20.46,
                        tax_amount: 1.86,
                        category: 'groceries',
                        notes: 'Simulated receipt for testing',
                        items: [
                            {name: 'Milk 1L', quantity: 1, unit_price: 2.99, total: 2.99},
                            {name: 'Bread', quantity: 1, unit_price: 3.49, total: 3.49},
                            {name: 'Eggs', quantity: 1, unit_price: 4.99, total: 4.99},
                            {name: 'Coffee', quantity: 1, unit_price: 8.99, total: 8.99}
                        ],
                        ocr_provider: 'docuclipper'
                    };
                }
                
                // Fill receipt details
                populateReceiptDetails(receipt);
                return;
            }
            
            // Get the authenticated user token
            firebase.auth().currentUser.getIdToken()
                .then(idToken => {
                    // Fetch receipt details from API
                    return fetch(`/api/receipts/${receiptId}`, {
                        headers: {
                            'Authorization': 'Bearer ' + idToken
                        }
                    });
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load receipt details. Server returned: ' + response.status);
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data.success) {
                        throw new Error(data.error || 'Failed to load receipt details.');
                    }
                    
                    // Populate the modal with receipt data
                    populateReceiptDetails(data.receipt, data.matched_transaction);
                })
                .catch(error => {
                    console.error('Error loading receipt details:', error);
                    setElementText(detailMerchant, 'Error: ' + error.message);
                    
                    // Hide sections that won't have data
                    if (noMatchMessage) noMatchMessage.style.display = 'block';
                    if (matchDetails) matchDetails.style.display = 'none';
                    if (noItemsMessage) noItemsMessage.style.display = 'block';
                    if (itemsTableContainer) itemsTableContainer.style.display = 'none';
                });
            
            // Helper function to populate receipt details
            function populateReceiptDetails(receipt, matchedTransaction = null) {
                // Basic receipt info
                setElementText(detailMerchant, receipt.merchant || 'Unknown');
                setElementText(detailDate, receipt.date || 'Unknown');
                setElementText(detailTotal, formatCurrency(receipt.total_amount));
                setElementText(detailTax, formatCurrency(receipt.tax_amount) || 'N/A');
                setElementText(detailReceiptId, receipt.receipt_id || 'N/A');
                
                // Set category dropdown
                if (detailCategory && receipt.category) {
                    // Find the matching option and select it
                    const options = detailCategory.options;
                    for (let i = 0; i < options.length; i++) {
                        if (options[i].value === receipt.category) {
                            detailCategory.selectedIndex = i;
                            break;
                        }
                    }
                }
                
                // Set notes if any
                if (detailNotes) {
                    detailNotes.value = receipt.notes || '';
                }
                
                // Show OCR provider information if available
                const modalTitle = document.getElementById('receipt-detail-modal-label');
                if (modalTitle && receipt.ocr_provider) {
                    const ocrProvider = receipt.ocr_provider === 'tabscanner' ? 'Tabscanner' : 'DocuClipper';
                    modalTitle.textContent = `Receipt Details (Processed with ${ocrProvider})`;
                }
                
                // Handle matched transaction
                if (matchedTransaction) {
                    // Fill in transaction details
                    setElementText(detailTransactionDesc, matchedTransaction.description || 'Unknown');
                    setElementText(detailTransactionAmount, formatCurrency(matchedTransaction.amount));
                    setElementText(detailTransactionDate, matchedTransaction.date || 'Unknown');
                    
                    // Show confidence level if available
                    const confidence = receipt.match_confidence || 0;
                    let confidenceText = '';
                    
                    if (receipt.manually_matched) {
                        confidenceText = 'Manually matched';
                    } else if (confidence >= 0.9) {
                        confidenceText = 'High confidence';
                    } else if (confidence >= 0.7) {
                        confidenceText = 'Medium confidence';
                    } else {
                        confidenceText = 'Low confidence';
                    }
                    
                    setElementText(detailMatchConfidence, confidenceText);
                    
                    // Show the match details
                    if (noMatchMessage) noMatchMessage.style.display = 'none';
                    if (matchDetails) matchDetails.style.display = 'block';
                } else {
                    // No matched transaction
                    if (noMatchMessage) noMatchMessage.style.display = 'block';
                    if (matchDetails) matchDetails.style.display = 'none';
                }
                
                // Handle receipt items
                if (receipt.items && receipt.items.length > 0) {
                    // Clear previous items
                    if (itemsTableBody) itemsTableBody.innerHTML = '';
                    
                    // Add items to the table
                    receipt.items.forEach(item => {
                        if (itemsTableBody) {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${item.name || 'Unknown item'}</td>
                                <td>${item.quantity || '1'}</td>
                                <td>${formatCurrency(item.unit_price)}</td>
                                <td>${formatCurrency(item.total)}</td>
                            `;
                            itemsTableBody.appendChild(row);
                        }
                    });
                    
                    // Show the items table
                    if (noItemsMessage) noItemsMessage.style.display = 'none';
                    if (itemsTableContainer) itemsTableContainer.style.display = 'block';
                } else {
                    // No items
                    if (noItemsMessage) noItemsMessage.style.display = 'block';
                    if (itemsTableContainer) itemsTableContainer.style.display = 'none';
                }
            }
        }
        
        function deleteReceipt(receiptId) {
            console.log('Deleting receipt:', receiptId);
            
            // Confirm deletion with the user
            if (!confirm('Are you sure you want to delete this receipt? This action cannot be undone.')) {
                return;
            }
            
            // In development/simulation mode
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                console.log('Development mode, simulating receipt deletion');
                
                // Get simulated receipts from localStorage
                let simulatedReceipts = JSON.parse(localStorage.getItem('simulatedReceipts') || '[]');
                
                // Filter out the receipt to delete
                simulatedReceipts = simulatedReceipts.filter(r => r.receipt_id !== receiptId);
                
                // Save back to localStorage
                localStorage.setItem('simulatedReceipts', JSON.stringify(simulatedReceipts));
                
                // Show success notification
                alert('Receipt deleted successfully.');
                
                // Reload receipts list
                loadReceipts();
                return;
            }
            
            // Show loading state
            const row = document.querySelector(`tr[data-receipt-id="${receiptId}"]`);
            if (row) {
                row.classList.add('table-secondary');
                row.innerHTML = '<td colspan="6" class="text-center"><i class="fas fa-spinner fa-spin"></i> Deleting...</td>';
            }
            
            // Get authenticated user token
            firebase.auth().currentUser.getIdToken()
                .then(idToken => {
                    // Send delete request to API
                    return fetch(`/api/receipts/${receiptId}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': 'Bearer ' + idToken
                        }
                    });
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to delete receipt. Server returned: ' + response.status);
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data.success) {
                        throw new Error(data.error || 'Failed to delete receipt.');
                    }
                    
                    console.log('Receipt deleted successfully:', data);
                    
                    // Show success notification
                    alert('Receipt deleted successfully.');
                    
                    // Reload receipts list
                    loadReceipts();
                    
                    // Update financial stats if needed
                    if (typeof updateFinancialStats === 'function') {
                        updateFinancialStats();
                    }
                })
                .catch(error => {
                    console.error('Error deleting receipt:', error);
                    alert('Error deleting receipt: ' + error.message);
                    
                    // Reload to reset the UI
                    loadReceipts();
                });
        }

        // Setup the connection between tiles in the bank modal
        function handleConnectBankSubmit() {
            console.log('Bank connection form submitted');
            
            // Get form values
            const bank = document.getElementById('bankSelection').value;
            const username = document.getElementById('bankUsername').value;
            const password = document.getElementById('bankPassword').value;
            const termsChecked = document.getElementById('termsCheck').checked;
            
            // Validate the form
            if (!bank || !username || !password || !termsChecked) {
                alert('Please complete all fields and accept the terms and conditions.');
                return;
            }
            
            // Hide the form and show the loading state
            document.getElementById('bank-connect-form').style.display = 'none';
            document.getElementById('auth-link-container').style.display = 'block';
            
            // Simulate bank connection process
            setTimeout(() => {
                simulateConnectedBank(bank);
            }, 2000);
        }
        
        // Move simulateConnectedBank function to global scope for cleaner code organization
        function simulateConnectedBank(bankCode) {
            console.log('Simulating bank connection for:', bankCode);
            
            // Get the bank name from the select dropdown
            const bankSelect = document.getElementById('bankSelection');
            const bankName = bankSelect.options[bankSelect.selectedIndex].text;
            
            // Create a new bank connection object
            const connection = {
                id: 'conn-' + Date.now(),
                bankCode: bankCode,
                bankName: bankName,
                status: 'active',
                connected: new Date().toISOString(),
                balance: (Math.random() * 10000).toFixed(2),
                accounts: [
                    {
                        id: 'act-' + Date.now(),
                        name: 'Checking Account',
                        type: 'checking',
                        balance: (Math.random() * 5000).toFixed(2)
                    },
                    {
                        id: 'act-' + (Date.now() + 1),
                        name: 'Savings Account',
                        type: 'savings',
                        balance: (Math.random() * 5000).toFixed(2)
                    }
                ]
            };
            
            // Save the connection to localStorage
            saveConnection(connection);
            
            // Update the UI
            updateBankConnectionsList();
            
            // Update the financial stats
            updateFinancialsFromBankConnection(connection);
            
            // Close the modal
            const bankConnectionModal = bootstrap.Modal.getInstance(document.getElementById('bankConnectionModal'));
            bankConnectionModal.hide();
            
            // Show a success message
            alert('Bank connection simulated successfully! You can now see your bank accounts on the dashboard.');
        }
        
        // Update financial stats from bank connection
        function updateFinancialsFromBankConnection(connection) {
            console.log('Updating financials from bank connection:', connection);
            
            // Assuming the total balance is available income
            if (connection && connection.balance) {
                const balance = parseFloat(connection.balance);
                // Update income (this is just for simulation)
                globalStats.netIncome += balance;
                // Recalculate balance
                globalStats.netBalance = globalStats.netIncome - globalStats.totalExpenses;
                // Update the dashboard
                updateDashboardStats();
                // Save the updated stats
                saveFinancialStats();
            }
        }
        
        // Save bank connection
        function saveConnection(connection) {
            const connections = getSavedBankConnections();
            connections.push(connection);
            localStorage.setItem('bankConnections', JSON.stringify(connections));
        }
        
        // Update the bank connections list in the UI
        function updateBankConnectionsList() {
            const connections = getSavedBankConnections();
            const noConnectionsMessage = document.getElementById('no-connections-message');
            const connectionsList = document.getElementById('connections-list');
            
            if (connections.length === 0) {
                noConnectionsMessage.style.display = 'block';
                connectionsList.style.display = 'none';
                return;
            }
            
            // Hide the no connections message and show the list
            noConnectionsMessage.style.display = 'none';
            connectionsList.style.display = 'block';
            
            // Clear the existing list
            connectionsList.innerHTML = '';
            
            // Add each connection to the list
            connections.forEach(connection => {
                const item = document.createElement('div');
                item.className = 'bank-connection-item';
                item.innerHTML = `
                    <img src="https://via.placeholder.com/40x40?text=${connection.bankCode}" class="bank-icon" alt="${connection.bankName} icon">
                    <div class="bank-info">
                        <div class="bank-name">${connection.bankName}</div>
                        <div class="bank-status success">Connected</div>
                    </div>
                    <div class="bank-balance">
                        <div class="balance-value">${formatCurrency(connection.balance)}</div>
                    </div>
                    <div class="bank-actions">
                        <button class="refresh-connection" title="Refresh connection">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                        <button class="delete-connection" title="Remove connection">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                `;
                
                // Add event listeners
                const refreshButton = item.querySelector('.refresh-connection');
                refreshButton.addEventListener('click', () => refreshConnection(connection.id));
                
                const deleteButton = item.querySelector('.delete-connection');
                deleteButton.addEventListener('click', () => deleteConnection(connection.id));
                
                // Add the item to the list
                connectionsList.appendChild(item);
            });
        }
        
        // Set up the connect bank button
        document.addEventListener('DOMContentLoaded', function() {
            // Set up the Connect Bank button
            const connectBankButton = document.getElementById('connect-bank-button');
            const bankConnectionModal = new bootstrap.Modal(document.getElementById('bankConnectionModal'));
            
            if (connectBankButton) {
                connectBankButton.addEventListener('click', function() {
                    bankConnectionModal.show();
                });
            }
            
            // Set up the Connect submit button
            const connectBankSubmit = document.getElementById('connect-bank-submit');
            if (connectBankSubmit) {
                connectBankSubmit.addEventListener('click', handleConnectBankSubmit);
            }
            
            // Initial update of bank connections list
            updateBankConnectionsList();
        });
        
        // Refresh connection function
        function refreshConnection(connectionId) {
            console.log('Refreshing connection:', connectionId);
            
            // Get the connections
            const connections = getSavedBankConnections();
            
            // Find the connection to refresh
            const connectionIndex = connections.findIndex(c => c.id === connectionId);
            
            if (connectionIndex === -1) {
                console.error('Connection not found:', connectionId);
                return;
            }
            
            // Simulate refreshing by updating the balance
            const oldBalance = parseFloat(connections[connectionIndex].balance);
            const newBalance = (Math.random() * 10000).toFixed(2);
            connections[connectionIndex].balance = newBalance;
            
            // Update the accounts
            connections[connectionIndex].accounts.forEach(account => {
                account.balance = (Math.random() * parseFloat(newBalance) * 0.8).toFixed(2);
            });
            
            // Save the updated connections
            localStorage.setItem('bankConnections', JSON.stringify(connections));
            
            // Update the UI
            updateBankConnectionsList();
            
            // Update financial stats - subtract old balance, add new balance
            globalStats.netIncome = globalStats.netIncome - oldBalance + parseFloat(newBalance);
            globalStats.netBalance = globalStats.netIncome - globalStats.totalExpenses;
            
            // Update the dashboard
            updateDashboardStats();
            
            // Save the updated stats
            saveFinancialStats();
            
            // Show a success message
            alert('Bank connection refreshed successfully! The account balance has been updated.');
        }
        
        // Delete connection function
        function deleteConnection(connectionId) {
            console.log('Deleting connection:', connectionId);
            
            // Confirm deletion
            if (!confirm('Are you sure you want to delete this bank connection? This will remove all financial data associated with this account.')) {
                return;
            }
            
            // Get the connections
            const connections = getSavedBankConnections();
            
            // Find the connection to delete
            const connectionIndex = connections.findIndex(c => c.id === connectionId);
            
            if (connectionIndex === -1) {
                console.error('Connection not found:', connectionId);
                return;
            }
            
            // Get the balance to remove from income
            const balance = parseFloat(connections[connectionIndex].balance);
            
            // Remove the connection
            connections.splice(connectionIndex, 1);
            
            // Save the updated connections
            localStorage.setItem('bankConnections', JSON.stringify(connections));
            
            // Update the UI
            updateBankConnectionsList();
            
            // Update financial stats - remove the balance from income
            globalStats.netIncome -= balance;
            globalStats.netBalance = globalStats.netIncome - globalStats.totalExpenses;
            
            // Update the dashboard
            updateDashboardStats();
            
            // Save the updated stats
            saveFinancialStats();
            
            // Show a success message
            alert('Bank connection deleted successfully.');
        }
    </script>
</body>
</html> 