name: Deploy TAAXDOG to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and code quality checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety flake8 black

      - name: Run security scan with Bandit
        run: bandit -r backend/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Check for vulnerabilities with Safety
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Code quality check with Flake8
        run: flake8 backend/ --max-line-length=120 --extend-ignore=E203,W503

      - name: Code formatting check with Black
        run: black --check backend/

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Backend tests
  test-backend:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-production.txt
          pip install pytest-cov pytest-xdist

      - name: Create test environment file
        run: |
          echo "FLASK_ENV=testing" > .env
          echo "SECRET_KEY=test-secret-key" >> .env
          echo "FIREBASE_PROJECT_ID=test-project" >> .env
          echo "JWT_SECRET_KEY=test-jwt-secret" >> .env
          echo "REDIS_URL=redis://localhost:6379/0" >> .env

      - name: Run unit tests
        run: pytest tests/unit/ -v --cov=backend --cov-report=xml --cov-report=html

      - name: Run integration tests
        run: pytest tests/integration/ -v

      - name: Run performance tests
        run: pytest tests/performance/ -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend tests
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./next-frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: next-frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Build application
        run: npm run build

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./next-frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Build and push Docker image
  build-and-push:
    needs: [security-scan, test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to staging
  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # This could be kubectl, AWS CLI, or other deployment tools

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Run basic health checks
          curl -f https://staging.taaxdog.com/api/health/status
          
          # Run E2E tests against staging
          # Add your end-to-end test commands here

  # Deploy to production
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # This could be:
          # - kubectl apply -f k8s/
          # - aws ecs update-service
          # - docker-compose up -d
          # - heroku container:release web

      - name: Post-deployment health check
        run: |
          # Wait for deployment to be ready
          sleep 60
          
          # Check application health
          curl -f https://api.taaxdog.com/api/health/status
          
          # Check key endpoints
          curl -f https://api.taaxdog.com/api/health/detailed

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          # Add notification to Slack, Discord, or email
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"üöÄ TAAXDOG deployed to production successfully!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          # Add failure notification
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"üö® TAAXDOG production deployment failed!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance monitoring after deployment
  post-deploy-monitoring:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Monitor application performance
        run: |
          # Run performance tests against production
          echo "Starting performance monitoring..."
          
          # Check response times
          curl -w "Response time: %{time_total}s\n" -o /dev/null -s https://api.taaxdog.com/api/health/status
          
          # Check if Prometheus metrics are available
          curl -f https://api.taaxdog.com/metrics || echo "Prometheus metrics not available"

      - name: Update deployment status
        run: |
          echo "Deployment monitoring completed"
          # Update status in monitoring system
          # Post to status page or monitoring dashboard 