// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with Australian compliance fields
model User {
  id              String          @id @default(uuid())
  email           String          @unique
  emailVerified   DateTime?
  name            String
  phone           String?
  password        String?         // For email/password auth
  image           String?
  role            Role            @default(USER)
  
  // Australian compliance fields
  abn             String?         // Australian Business Number
  tfn             String?         // Tax File Number (encrypted)
  taxResidency    TaxResidency    @default(RESIDENT)
  
  // Security fields
  failedLoginAttempts Int         @default(0)
  lockedUntil     DateTime?
  lastLoginAt     DateTime?
  lastLoginIp     String?
  twoFactorEnabled Boolean        @default(false)
  twoFactorSecret String?
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  accounts        Account[]
  sessions        Session[]
  auditLogs       AuditLog[]
  subscriptions   Subscription[]
  taxReturns      TaxReturn[]
  payments        Payment[]
  aiConversations AIConversation[]
  aiInsights      AIInsight[]
  aiUsageTracking AIUsageTracking[]
  basiq_users     basiq_users?
  basiq_api_logs  basiq_api_logs[]
  receipts        Receipt[]
  budgets         Budget[]
  budgetTracking  BudgetTracking[]
  financialInsights FinancialInsight[]
  
  @@map("users")
}

// NextAuth Account model
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// NextAuth Verification Token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Audit Log for authentication events
model AuditLog {
  id          String        @id @default(uuid())
  userId      String?
  event       AuthEvent
  ipAddress   String
  userAgent   String?
  metadata    Json?
  success     Boolean       @default(true)
  createdAt   DateTime      @default(now())
  
  user        User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([event])
  @@index([createdAt])
  @@map("audit_logs")
}

// Subscription model (existing)
model Subscription {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  stripeCustomerId       String   @unique
  stripeSubscriptionId   String   @unique
  stripePriceId          String
  status                 String
  plan                   Plan
  interval               String   @default("month")
  amount                 Int
  currency               String   @default("aud")
  currentPeriodStart     DateTime
  currentPeriodEnd       DateTime
  cancelAtPeriodEnd      Boolean  @default(false)
  cancelledAt            DateTime?
  trialEnd               DateTime?
  defaultPaymentMethodId String?
  lastPaymentAttempt     DateTime?
  failedPaymentCount     Int      @default(0)
  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([stripeCustomerId])
  @@map("subscriptions")
}

// Tax Return model (existing)
model TaxReturn {
  id           String    @id @default(uuid())
  userId       String
  year         String
  data         Json
  status       TaxReturnStatus @default(DRAFT)
  submittedAt  DateTime?
  processedAt  DateTime?
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, year])
  @@index([userId])
  @@map("tax_returns")
}

// Payment model for tracking Stripe payments
model Payment {
  id                    String   @id @default(uuid())
  userId                String
  stripePaymentIntentId String   @unique
  amount                Int
  currency              String
  status                String
  description           String?
  metadata              Json?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
  @@map("payments")
}

// Invoice model for Australian tax compliance
model Invoice {
  id               String   @id @default(uuid())
  invoiceNumber    String   @unique
  stripeInvoiceId  String   @unique
  customerName     String
  customerEmail    String
  customerABN      String?
  subtotal         Int
  gstAmount        Int
  total            Int
  status           String
  invoiceDate      DateTime
  paidAt           DateTime?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  lineItems        InvoiceLineItem[]
  
  @@index([invoiceNumber])
  @@index([stripeInvoiceId])
  @@index([customerEmail])
  @@map("invoices")
}

// Invoice Line Item model
model InvoiceLineItem {
  id          String   @id @default(uuid())
  invoiceId   String
  description String
  quantity    Int
  unitPrice   Int
  totalPrice  Int
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@index([invoiceId])
  @@map("invoice_line_items")
}

// AI Conversations model for chat history
model AIConversation {
  id           String   @id @default(uuid())
  userId       String
  sessionId    String   @db.Uuid
  provider     String
  model        String
  messages     Json
  context      Json?
  tokensUsed   Int      @default(0)
  costUsd      Decimal  @default(0) @db.Decimal(10, 6)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
  @@map("ai_conversations")
}

// AI Insights model for generated analysis
model AIInsight {
  id               String    @id @default(uuid())
  userId           String
  insightType      String
  category         String
  content          Json
  confidenceScore  Decimal?  @db.Decimal(3, 2)
  sourceDataIds    String[]  @db.Uuid
  provider         String
  model            String
  isActive         Boolean   @default(true)
  expiresAt        DateTime?
  
  createdAt        DateTime  @default(now())
  
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([insightType])
  @@index([category])
  @@index([isActive])
  @@index([createdAt])
  @@map("ai_insights")
}

// AI Usage Tracking model
model AIUsageTracking {
  id              String   @id @default(uuid())
  userId          String
  provider        String
  model           String
  operationType   String
  tokensInput     Int      @default(0)
  tokensOutput    Int      @default(0)
  costUsd         Decimal  @default(0) @db.Decimal(10, 6)
  responseTimeMs  Int?
  success         Boolean  @default(true)
  errorMessage    String?
  
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([provider])
  @@index([operationType])
  @@index([createdAt])
  @@map("ai_usage_tracking")
}

// AI Cache model
model AICache {
  id             String   @id @default(uuid())
  cacheKey       String   @unique
  operationType  String
  inputHash      String
  response       Json
  provider       String
  model          String
  hitCount       Int      @default(0)
  expiresAt      DateTime
  
  createdAt      DateTime @default(now())
  
  @@index([cacheKey])
  @@index([operationType])
  @@index([expiresAt])
  @@map("ai_cache")
}

// AI Provider Health model
model AIProviderHealth {
  id                   String    @id @default(uuid())
  provider             String    @unique
  status               String    @default("healthy")
  consecutiveFailures  Int       @default(0)
  lastFailureAt        DateTime?
  lastSuccessAt        DateTime?
  circuitOpenUntil     DateTime?
  
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  
  @@map("ai_provider_health")
}

// Enums
enum Role {
  USER
  ADMIN
  ACCOUNTANT
  SUPPORT
}

enum TaxResidency {
  RESIDENT
  NON_RESIDENT
  TEMPORARY_RESIDENT
}

enum AuthEvent {
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGOUT
  REGISTER
  PASSWORD_RESET_REQUEST
  PASSWORD_RESET_SUCCESS
  PASSWORD_CHANGE
  EMAIL_VERIFICATION
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  TWO_FACTOR_SUCCESS
  TWO_FACTOR_FAILED
  SESSION_EXPIRED
  SUSPICIOUS_ACTIVITY
}

enum Plan {
  SMART
  PRO
}

enum TaxReturnStatus {
  DRAFT
  SUBMITTED
  PROCESSING
  COMPLETED
  REJECTED
}

// BASIQ Banking Integration Models

model basiq_users {
  id                  String    @id @default(uuid()) @db.Uuid
  user_id             String    @unique
  basiq_user_id       String    @unique @db.VarChar(255)
  email               String    @db.VarChar(255)
  mobile              String?   @db.VarChar(20)
  connection_status   String?   @default("active") @db.VarChar(50)
  consent_id          String?   @db.VarChar(255)
  consent_status      String?   @db.VarChar(50)
  consent_expires_at  DateTime?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
  
  // Relations
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  bank_connections    bank_connections[]
  bank_accounts       bank_accounts[]
}

model bank_connections {
  id                    String    @id @default(uuid()) @db.Uuid
  basiq_user_id         String    @db.Uuid
  connection_id         String    @unique @db.VarChar(255)
  institution_id        String    @db.VarChar(255)
  institution_name      String    @db.VarChar(255)
  institution_short_name String?  @db.VarChar(100)
  institution_logo_url  String?
  status                String?   @default("pending") @db.VarChar(50)
  last_synced           DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @default(now())
  
  // Relations
  basiq_user            basiq_users @relation(fields: [basiq_user_id], references: [id], onDelete: Cascade)
  bank_accounts         bank_accounts[]
}

model bank_accounts {
  id                    String    @id @default(uuid()) @db.Uuid
  basiq_user_id         String    @db.Uuid
  connection_id         String    @db.Uuid
  basiq_account_id      String    @unique @db.VarChar(255)
  account_holder        String?   @db.VarChar(255)
  account_number        String?   @db.VarChar(50)
  bsb                   String?   @db.VarChar(10)
  institution_name      String?   @db.VarChar(255)
  account_type          String?   @db.VarChar(100)
  account_name          String?   @db.VarChar(255)
  balance_available     Decimal?  @db.Decimal(15, 2)
  balance_current       Decimal?  @db.Decimal(15, 2)
  currency              String?   @default("AUD") @db.VarChar(3)
  status                String?   @default("active") @db.VarChar(50)
  is_business_account   Boolean   @default(false)
  last_synced           DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @default(now())
  
  // Relations
  basiq_user            basiq_users @relation(fields: [basiq_user_id], references: [id], onDelete: Cascade)
  connection            bank_connections @relation(fields: [connection_id], references: [id], onDelete: Cascade)
  bank_transactions     bank_transactions[]
}

model bank_transactions {
  id                    String    @id @default(uuid()) @db.Uuid
  bank_account_id       String    @db.Uuid
  basiq_transaction_id  String    @unique @db.VarChar(255)
  description           String?
  amount                Decimal   @db.Decimal(15, 2)
  transaction_date      DateTime  @db.Date
  post_date             DateTime? @db.Date
  balance               Decimal?  @db.Decimal(15, 2)
  transaction_type      String?   @db.VarChar(100)
  direction             String?   @db.VarChar(20)
  category              String?   @db.VarChar(100)
  subcategory           String?   @db.VarChar(100)
  merchant_name         String?   @db.VarChar(255)
  status                String?   @default("posted") @db.VarChar(50)
  is_business_expense   Boolean   @default(false)
  tax_category          String?   @db.VarChar(100)
  gst_amount            Decimal?  @db.Decimal(15, 2)
  receipt_id            String?   @db.Uuid
  notes                 String?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @default(now())
  
  // Relations
  bank_account          bank_accounts @relation(fields: [bank_account_id], references: [id], onDelete: Cascade)
}

model basiq_webhooks {
  id                String    @id @default(uuid()) @db.Uuid
  webhook_id        String?   @unique @db.VarChar(255)
  event_type        String    @db.VarChar(100)
  resource_type     String?   @db.VarChar(100)
  resource_id       String?   @db.VarChar(255)
  payload           Json
  status            String?   @default("pending") @db.VarChar(50)
  processed_at      DateTime?
  error_message     String?
  retry_count       Int       @default(0)
  created_at        DateTime  @default(now())
}

model basiq_api_logs {
  id                String    @id @default(uuid()) @db.Uuid
  user_id           String?
  endpoint          String    @db.VarChar(255)
  method            String    @db.VarChar(10)
  request_body      Json?
  response_status   Int?
  response_body     Json?
  error_message     String?
  duration_ms       Int?
  created_at        DateTime  @default(now())
  
  // Relations
  user              User?     @relation(fields: [user_id], references: [id])
}

// Receipt model for Australian tax compliance
model Receipt {
  id               String   @id @default(uuid())
  userId           String
  merchant         String?  @db.VarChar(255)
  totalAmount      Decimal  @db.Decimal(15, 2) @map("total_amount")
  gstAmount        Decimal? @db.Decimal(15, 2) @map("gst_amount")
  date             DateTime @db.Date
  items            Json?
  imageUrl         String?  @db.VarChar(500) @map("image_url")
  aiProcessed      Boolean  @default(false) @map("ai_processed")
  aiConfidence     Decimal? @db.Decimal(3, 2) @map("ai_confidence")
  aiProvider       String?  @db.VarChar(50) @map("ai_provider")
  aiModel          String?  @db.VarChar(100) @map("ai_model")
  processingStatus ReceiptStatus @default(PENDING) @map("processing_status")
  
  // Australian tax compliance fields
  abn              String?  @db.VarChar(20)
  taxInvoiceNumber String?  @db.VarChar(100) @map("tax_invoice_number")
  taxCategory      String?  @db.VarChar(100) @map("tax_category")
  isGstRegistered  Boolean  @default(false) @map("is_gst_registered")
  
  // Matching fields
  matchedTransactionId String? @map("matched_transaction_id")
  matchConfidence  Decimal? @db.Decimal(3, 2) @map("match_confidence")
  
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId], map: "idx_receipts_user_id")
  @@index([date], map: "idx_receipts_date") 
  @@index([merchant], map: "idx_receipts_merchant")
  @@index([processingStatus], map: "idx_receipts_processing_status")
  @@map("receipts")
}

// Receipt Processing Status enum
enum ReceiptStatus {
  PENDING
  PROCESSING
  PROCESSED
  MANUAL_REVIEW
  FAILED
  MATCHED
}

// Budget model for financial planning
model Budget {
  id               String   @id @default(uuid())
  userId           String   @map("user_id")
  name             String?  @db.VarChar(255)
  monthlyBudget    Decimal  @db.Decimal(15, 2) @map("monthly_budget")
  targetSavings    Decimal? @db.Decimal(15, 2) @map("target_savings")
  monthlyIncome    Decimal? @db.Decimal(15, 2) @map("monthly_income")
  predictions      Json?
  categoryLimits   Json?    @map("category_limits")
  confidenceScore  Decimal? @db.Decimal(3, 2) @map("confidence_score")
  aiProvider       String?  @db.VarChar(50) @map("ai_provider")
  aiModel          String?  @db.VarChar(100) @map("ai_model")
  analysisPeriod   String?  @db.VarChar(50) @map("analysis_period")
  predictionPeriod String?  @db.VarChar(50) @map("prediction_period")
  status           BudgetStatus @default(ACTIVE)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  budgetTracking   BudgetTracking[]
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("budgets")
}

// Budget Tracking model
model BudgetTracking {
  id              String   @id @default(uuid())
  budgetId        String   @map("budget_id")
  userId          String   @map("user_id")
  month           Int
  year            Int
  predictedAmount Decimal  @db.Decimal(15, 2) @map("predicted_amount")
  actualAmount    Decimal? @db.Decimal(15, 2) @map("actual_amount")
  variance        Decimal? @db.Decimal(15, 2)
  category        String?  @db.VarChar(100)
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relations
  budget          Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([budgetId])
  @@index([userId])
  @@index([month, year])
  @@index([category])
  @@map("budget_tracking")
}

// Financial Insights model
model FinancialInsight {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  insightType     String   @db.VarChar(100) @map("insight_type")
  category        String?  @db.VarChar(100)
  content         Json?
  confidenceScore Decimal? @db.Decimal(3, 2) @map("confidence_score")
  sourceDataIds   String[] @map("source_data_ids")
  provider        String?  @db.VarChar(50)
  model           String?  @db.VarChar(100)
  title           String?  @db.VarChar(255)
  description     String?  @db.Text
  recommendations Json?
  priority        InsightPriority @default(MEDIUM)
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  expiresAt       DateTime? @map("expires_at")
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([insightType])
  @@index([category])
  @@index([priority])
  @@index([isActive])
  @@index([createdAt])
  @@map("financial_insights")
}

// Budget Status enum
enum BudgetStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

// Insight Priority enum
enum InsightPriority {
  HIGH
  MEDIUM
  LOW
}